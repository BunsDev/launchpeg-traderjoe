{
  "address": "0x83F83a2980ea5B05f8bC6C3a2457B81C1e8e6545",
  "abi": [
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__CanNotMintThisMany",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__CanOnlyMintMultipleOfMaxBatchSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidAllowlistPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidBatchRevealSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidJoeFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidMaxBatchSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidProjectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidRevealDates",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidRoyaltyInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__JoeFeeAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__LargerCollectionSizeNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyForDevReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__NotEligibleForAllowlistMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avaxSent",
          "type": "uint256"
        }
      ],
      "name": "Launchpeg__NotEnoughAVAX",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PhasesAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__PublicSaleBeforeAllowlist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__RevealNextBatchNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongAddressesAndNumSlotsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowlistSeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "AvaxWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "DevMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowlistPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "JoeFeeInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ProjectOwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "PublicSaleStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchSeed",
          "type": "uint256"
        }
      ],
      "name": "Reveal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "unrevealedURI",
          "type": "string"
        }
      ],
      "name": "UnrevealedURISet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINT_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "allowlistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForAllowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedByDevs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringAllowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchToSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhase",
      "outputs": [
        {
          "internalType": "enum IBaseLaunchpeg.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            }
          ],
          "internalType": "struct ERC721AUpgradeable.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasBatchToReveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchRevealSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealInterval",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "initializeJoeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allowlistStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowlistPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "initializePhases",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenRevealed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerAddressDuringMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealNextBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_numNfts",
          "type": "uint256[]"
        }
      ],
      "name": "seedAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        }
      ],
      "name": "setProjectOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feePercent",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_unrevealedURI",
          "type": "string"
        }
      ],
      "name": "setUnrevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unrevealedURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1dc8619ea9f443d3a06bf89bbbbbe216d0ca0fe08bc5bb39ced1f3e5984c4cd",
  "receipt": {
    "to": null,
    "from": "0x1119fbb02F38764CD90F2d9fB35FeDcd8378ac2A",
    "contractAddress": "0x83F83a2980ea5B05f8bC6C3a2457B81C1e8e6545",
    "transactionIndex": 3,
    "gasUsed": "3487041",
    "logsBloom": "0x
    "blockHash": "0xfed8858e5d74f4eb8722e3fb4536d30a8be4c156cf6bd807198500bd7336f107",
    "transactionHash": "0xa1dc8619ea9f443d3a06bf89bbbbbe216d0ca0fe08bc5bb39ced1f3e5984c4cd",
    "logs": [],
    "blockNumber": 10108377,
    "cumulativeGasUsed": "4003593",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79df2a8fa68a29c0e6a82ad57b67595e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__CanNotMintThisMany\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__CanOnlyMintMultipleOfMaxBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidAllowlistPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidBatchRevealSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidJoeFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidMaxBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidProjectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidRevealDates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidRoyaltyInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__JoeFeeAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__LargerCollectionSizeNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyForDevReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__NotEligibleForAllowlistMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"avaxSent\",\"type\":\"uint256\"}],\"name\":\"Launchpeg__NotEnoughAVAX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PhasesAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__PublicSaleBeforeAllowlist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__RevealNextBatchNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongAddressesAndNumSlotsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowlistSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AvaxWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"DevMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"JoeFeeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"PublicSaleStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchSeed\",\"type\":\"uint256\"}],\"name\":\"Reveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"}],\"name\":\"UnrevealedURISet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"allowlistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForAllowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedByDevs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringAllowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchToSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721AUpgradeable.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBatchToReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchRevealSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealInterval\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"initializeJoeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"initializePhases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenRevealed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddressDuringMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealNextBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numNfts\",\"type\":\"uint256[]\"}],\"name\":\"seedAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"}],\"name\":\"setProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercent\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unrevealedURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevealedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"events\":{\"Initialized(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted on initializePhases()\",\"params\":{\"allowlistPrice\":\"Price of the allowlist sale in Avax\",\"allowlistStartTime\":\"Allowlist mint start time in seconds\",\"publicSaleStartTime\":\"Public sale start time in seconds\",\"salePrice\":\"Price of the public sale in Avax\"}},\"Mint(address,uint256,uint256,uint256)\":{\"details\":\"Emitted on allowlistMint(), publicSaleMint()\",\"params\":{\"price\":\"Price in AVAX for the NFTs\",\"quantity\":\"Amount of NFTs minted\",\"sender\":\"The address that minted\",\"tokenId\":\"The token ID of the first minted NFT\"}},\"PublicSaleStateChanged(bool)\":{\"details\":\"Emitted on setPublicSaleActive()\",\"params\":{\"isActive\":\"True if the public sale is open, false otherwise\"}}},\"kind\":\"dev\",\"methods\":{\"allowlistMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"currentPhase()\":{\"returns\":{\"_0\":\"phase Current phase\"}},\"devMint(uint256)\":{\"details\":\"Can only mint up to `amountForDevs`\",\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getOwnershipData(uint256)\":{\"params\":{\"_tokenId\":\"Token ID\"},\"returns\":{\"_0\":\"TokenOwnership Ownership struct for a specific token ID\"}},\"hasBatchToReveal()\":{\"returns\":{\"_0\":\"bool Whether reveal can be triggered or not\",\"_1\":\"uint256 The number of the next batch that will be revealed\"}},\"initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_batchRevealSize\":\"Size of the batch reveal\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_maxBatchSize\":\"Max amount of NFTs that can be minted at once\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_revealInterval\":\"Interval between two batch reveals in seconds\",\"_revealStartTime\":\"Start of the token URIs reveal in seconds\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"}},\"initializeJoeFee(uint256,address)\":{\"params\":{\"_joeFeeCollector\":\"The address to which the fees on the sale will be sent\",\"_joeFeePercent\":\"The fees collected by Joepegs on the sale benefits\"}},\"initializePhases(uint256,uint256,uint256,uint256)\":{\"details\":\"Can only be called once\",\"params\":{\"_allowlistPrice\":\"Price of the allowlist sale in Avax\",\"_allowlistStartTime\":\"Allowlist mint start time in seconds\",\"_publicSaleStartTime\":\"Public sale start time in seconds\",\"_salePrice\":\"Price of the public sale in Avax\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"numberMinted(address)\":{\"params\":{\"_owner\":\"The owner of the NFTs\"},\"returns\":{\"_0\":\"numberMinted Number of NFTs minted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"publicSaleMint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of NFTs to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"seedAllowlist(address[],uint256[])\":{\"params\":{\"_addresses\":\"List of addresses allowed to mint during the allowlist phase\",\"_numNfts\":\"List of NFT quantities mintable per address\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"This sets the URI for revealed tokens Only callable by project owner\",\"params\":{\"_baseURI\":\"Base URI to be set\"}},\"setProjectOwner(address)\":{\"details\":\"The project owner can call `devMint` any time\",\"params\":{\"_projectOwner\":\"The project owner\"}},\"setRoyaltyInfo(address,uint96)\":{\"params\":{\"_feePercent\":\"Royalty fee percent in basis point\",\"_receiver\":\"Royalty fee collector\"}},\"setUnrevealedURI(string)\":{\"details\":\"Only callable by project owner\",\"params\":{\"_unrevealedURI\":\"Unrevealed URI to be set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these IDs are created. This function call must use less than 30 000 gas.\",\"params\":{\"_interfaceId\":\"InterfaceId to consider. Comes from type(Interface).interfaceId\"},\"returns\":{\"_0\":\"isInterfaceSupported True if the considered interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_id\":\"Token id\"},\"returns\":{\"_0\":\"URI Token URI\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAVAX(address)\":{\"params\":{\"_to\":\"Recipient of the earned AVAX\"}}},\"stateVariables\":{\"allowlistPrice\":{\"details\":\"allowlistPrice is scaled to 1e18\"},\"salePrice\":{\"details\":\"salePrice is scaled to 1e18\"}},\"title\":\"FlatLaunchpeg\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASIS_POINT_PRECISION()\":{\"notice\":\"Percentage base point\"},\"allowlist(address)\":{\"notice\":\"The amount of NFTs each allowed address can mint during the allowlist mint\"},\"allowlistMint(uint256)\":{\"notice\":\"Mint NFTs during the allowlist mint\"},\"allowlistPrice()\":{\"notice\":\"Price of one NFT for people on the mint list\"},\"allowlistStartTime()\":{\"notice\":\"Start time of the allowlist mint in seconds\"},\"amountForAllowlist()\":{\"notice\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\"},\"amountForDevs()\":{\"notice\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\"},\"amountMintedByDevs()\":{\"notice\":\"Tracks the amount of NFTs minted by `projectOwner`\"},\"amountMintedDuringAllowlist()\":{\"notice\":\"Tracks the amount of NFTs minted on Allowlist phase\"},\"amountMintedDuringPublicSale()\":{\"notice\":\"Tracks the amount of NFTs minted on Public Sale phase\"},\"baseURI()\":{\"notice\":\"Token URI after collection reveal\"},\"batchToSeed(uint256)\":{\"notice\":\"Randomized seeds used to shuffle TokenURIs\"},\"collectionSize()\":{\"notice\":\"The collection size (e.g 10000)\"},\"currentPhase()\":{\"notice\":\"Returns the current phase\"},\"devMint(uint256)\":{\"notice\":\"Mint NFTs to the project owner\"},\"forceReveal()\":{\"notice\":\"Allows ProjectOwner to reveal batches even if the conditions are not met\"},\"getOwnershipData(uint256)\":{\"notice\":\"Returns the ownership data of a specific token ID\"},\"hasBatchToReveal()\":{\"notice\":\"Tells you if a batch can be revealed\"},\"initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"FlatLaunchpeg initialization Can only be called once\"},\"initializeJoeFee(uint256,address)\":{\"notice\":\"Initialize the sales fee percent taken by Joepegs and address that collects the fees\"},\"initializePhases(uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize the two phases of the sale\"},\"joeFeeCollector()\":{\"notice\":\"The address to which the fees on the sale will be sent\"},\"joeFeePercent()\":{\"notice\":\"The fees collected by Joepegs on the sale benefits\"},\"lastTokenRevealed()\":{\"notice\":\"Last token that has been revealed\"},\"maxBatchSize()\":{\"notice\":\"Max amount of NFTs that can be minted at once\"},\"maxPerAddressDuringMint()\":{\"notice\":\"Max amount of NFTs an address can mint\"},\"numberMinted(address)\":{\"notice\":\"Returns the number of NFTs minted by a specific address\"},\"projectOwner()\":{\"notice\":\"The project owner\"},\"publicSaleMint(uint256)\":{\"notice\":\"Mint NFTs during the public sale\"},\"publicSaleStartTime()\":{\"notice\":\"Start time of the public sale in seconds\"},\"revealBatchSize()\":{\"notice\":\"Size of the batch reveal\"},\"revealInterval()\":{\"notice\":\"Time interval for gradual reveal\"},\"revealNextBatch()\":{\"notice\":\"Reveals the next batch if the reveal conditions are met\"},\"revealStartTime()\":{\"notice\":\"Timestamp for the start of the reveal process\"},\"salePrice()\":{\"notice\":\"Price of one NFT during the public sale\"},\"seedAllowlist(address[],uint256[])\":{\"notice\":\"Set amount of NFTs mintable per address during the allowlist phase\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI\"},\"setProjectOwner(address)\":{\"notice\":\"Set the project owner\"},\"setRoyaltyInfo(address,uint96)\":{\"notice\":\"Set the royalty fee\"},\"setUnrevealedURI(string)\":{\"notice\":\"Set the unrevealed URI\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"unrevealedURI()\":{\"notice\":\"Token URI before the collection reveal\"},\"withdrawAVAX(address)\":{\"notice\":\"Withdraw AVAX to the contract owner\"}},\"notice\":\"Implements a simple minting NFT contract with an allowlist and public sale phase.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlatLaunchpeg.sol\":\"FlatLaunchpeg\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x77922571fd4422e5503bcf79fb428fb2764b813d07de23c5738a290f0ede72b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/BaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\nimport \\\"./BatchReveal.sol\\\";\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\n\\n/// @title BaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Implements the functionalities shared between Launchpeg and FlatLaunchpeg contracts.\\nabstract contract BaseLaunchpeg is\\n    IBaseLaunchpeg,\\n    ERC721AUpgradeable,\\n    BatchReveal,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2981Upgradeable\\n{\\n    using StringsUpgradeable for uint256;\\n\\n    /// @notice The collection size (e.g 10000)\\n    uint256 public override collectionSize;\\n\\n    /// @notice Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @dev It can be minted any time via `devMint`\\n    uint256 public override amountForDevs;\\n\\n    /// @notice Amount of NFTs available for the allowlist mint (e.g 1000)\\n    uint256 public override amountForAllowlist;\\n\\n    /// @notice Max amount of NFTs that can be minted at once\\n    uint256 public override maxBatchSize;\\n\\n    /// @notice Max amount of NFTs an address can mint\\n    uint256 public override maxPerAddressDuringMint;\\n\\n    /// @notice The fees collected by Joepegs on the sale benefits\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public override joeFeePercent;\\n\\n    /// @notice The address to which the fees on the sale will be sent\\n    address public override joeFeeCollector;\\n\\n    /// @notice Percentage base point\\n    uint256 public constant BASIS_POINT_PRECISION = 10_000;\\n\\n    /// @notice The project owner\\n    /// @dev We may own the contract during the launch; this address is allowed to call `devMint`\\n    address public override projectOwner;\\n\\n    /// @notice Token URI after collection reveal\\n    string public baseURI;\\n\\n    /// @notice Token URI before the collection reveal\\n    string public unrevealedURI;\\n\\n    /// @notice The amount of NFTs each allowed address can mint during the allowlist mint\\n    mapping(address => uint256) public override allowlist;\\n\\n    /// @notice Tracks the amount of NFTs minted by `projectOwner`\\n    uint256 public override amountMintedByDevs;\\n\\n    /// @notice Tracks the amount of NFTs minted on Allowlist phase\\n    uint256 public override amountMintedDuringAllowlist;\\n\\n    /// @notice Tracks the amount of NFTs minted on Public Sale phase\\n    uint256 public override amountMintedDuringPublicSale;\\n\\n    /// @notice Start time of the allowlist mint in seconds\\n    uint256 public override allowlistStartTime;\\n\\n    /// @notice Start time of the public sale in seconds\\n    /// @dev A timestamp greater than the allowlist mint start\\n    uint256 public override publicSaleStartTime;\\n\\n    /// @dev Emitted on initializeJoeFee()\\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\\n    /// @param feeCollector The address to which the fees on the sale will be sent\\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\\n\\n    /// @dev Emitted on devMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    event DevMint(address indexed sender, uint256 quantity);\\n\\n    /// @dev Emitted on withdrawAVAX()\\n    /// @param sender The address that withdrew the tokens\\n    /// @param amount Amount of AVAX transfered to `sender`\\n    /// @param fee Amount of AVAX paid to the fee collector\\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\\n\\n    /// @dev Emitted on setProjectOwner()\\n    /// @param owner The new project owner\\n    event ProjectOwnerUpdated(address indexed owner);\\n\\n    /// @dev Emitted on setBaseURI()\\n    /// @param baseURI The new base URI\\n    event BaseURISet(string baseURI);\\n\\n    /// @dev Emitted on setUnrevealedURI()\\n    /// @param unrevealedURI The new base URI\\n    event UnrevealedURISet(string unrevealedURI);\\n\\n    /// @dev Emitted on seedAllowlist()\\n    event AllowlistSeeded();\\n\\n    /// @dev Emitted on _setDefaultRoyalty()\\n    /// @param receiver Royalty fee collector\\n    /// @param feePercent Royalty fee percent in basis point\\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\\n\\n    modifier isEOA() {\\n        if (tx.origin != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProjectOwner() {\\n        if (projectOwner != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev BaseLaunchpeg initialization\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _batchRevealSize Size of the batch reveal\\n    function initializeBaseLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        uint256 _batchRevealSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __ERC2981_init();\\n\\n        __ERC721A_init(_name, _symbol);\\n        initializeBatchReveal(_batchRevealSize, _collectionSize);\\n\\n        if (_projectOwner == address(0)) {\\n            revert Launchpeg__InvalidProjectOwner();\\n        }\\n\\n        if (_amountForDevs + _amountForAllowlist > _collectionSize) {\\n            revert Launchpeg__LargerCollectionSizeNeeded();\\n        }\\n\\n        if (_maxBatchSize > _collectionSize) {\\n            revert Launchpeg__InvalidMaxBatchSize();\\n        }\\n        // We assume that if the reveal is more than 100 days in the future, that's a mistake\\n        // Same if the reveal interval is longer than 10 days\\n        if (\\n            _revealStartTime > block.timestamp + 8_640_000 ||\\n            _revealInterval > 864_000\\n        ) {\\n            revert Launchpeg__InvalidRevealDates();\\n        }\\n\\n        projectOwner = _projectOwner;\\n        // Default royalty is 5%\\n        _setDefaultRoyalty(_royaltyReceiver, 500);\\n\\n        maxBatchSize = _maxBatchSize;\\n        collectionSize = _collectionSize;\\n        maxPerAddressDuringMint = _maxBatchSize;\\n        amountForDevs = _amountForDevs;\\n        amountForAllowlist = _amountForAllowlist;\\n\\n        revealStartTime = _revealStartTime;\\n        revealInterval = _revealInterval;\\n    }\\n\\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\\n    /// @param _joeFeePercent The fees collected by Joepegs on the sale benefits\\n    /// @param _joeFeeCollector The address to which the fees on the sale will be sent\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (joeFeeCollector != address(0)) {\\n            revert Launchpeg__JoeFeeAlreadyInitialized();\\n        }\\n        if (_joeFeePercent > BASIS_POINT_PRECISION) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n        joeFeePercent = _joeFeePercent;\\n        joeFeeCollector = _joeFeeCollector;\\n        emit JoeFeeInitialized(_joeFeePercent, _joeFeeCollector);\\n    }\\n\\n    /// @notice Set the royalty fee\\n    /// @param _receiver Royalty fee collector\\n    /// @param _feePercent Royalty fee percent in basis point\\n    function setRoyaltyInfo(address _receiver, uint96 _feePercent)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        // Royalty fees are limited to 25%\\n        if (_feePercent > 2_500) {\\n            revert Launchpeg__InvalidRoyaltyInfo();\\n        }\\n        _setDefaultRoyalty(_receiver, _feePercent);\\n        emit DefaultRoyaltySet(_receiver, _feePercent);\\n    }\\n\\n    /// @notice Set amount of NFTs mintable per address during the allowlist phase\\n    /// @param _addresses List of addresses allowed to mint during the allowlist phase\\n    /// @param _numNfts List of NFT quantities mintable per address\\n    function seedAllowlist(\\n        address[] calldata _addresses,\\n        uint256[] calldata _numNfts\\n    ) external override onlyOwner {\\n        uint256 addressesLength = _addresses.length;\\n        if (addressesLength != _numNfts.length) {\\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\\n        }\\n        for (uint256 i; i < addressesLength; i++) {\\n            allowlist[_addresses[i]] = _numNfts[i];\\n        }\\n\\n        emit AllowlistSeeded();\\n    }\\n\\n    /// @notice Set the base URI\\n    /// @dev This sets the URI for revealed tokens\\n    /// Only callable by project owner\\n    /// @param _baseURI Base URI to be set\\n    function setBaseURI(string calldata _baseURI) external override onlyOwner {\\n        baseURI = _baseURI;\\n        emit BaseURISet(baseURI);\\n    }\\n\\n    /// @notice Set the unrevealed URI\\n    /// @dev Only callable by project owner\\n    /// @param _unrevealedURI Unrevealed URI to be set\\n    function setUnrevealedURI(string calldata _unrevealedURI)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        unrevealedURI = _unrevealedURI;\\n        emit UnrevealedURISet(unrevealedURI);\\n    }\\n\\n    /// @notice Set the project owner\\n    /// @dev The project owner can call `devMint` any time\\n    /// @param _projectOwner The project owner\\n    function setProjectOwner(address _projectOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_projectOwner == address(0)) {\\n            revert Launchpeg__InvalidProjectOwner();\\n        }\\n\\n        projectOwner = _projectOwner;\\n        emit ProjectOwnerUpdated(projectOwner);\\n    }\\n\\n    /// @notice Mint NFTs to the project owner\\n    /// @dev Can only mint up to `amountForDevs`\\n    /// @param _quantity Quantity of NFTs to mint\\n    function devMint(uint256 _quantity) external override onlyProjectOwner {\\n        if (totalSupply() + _quantity > collectionSize) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        if (amountMintedByDevs + _quantity > amountForDevs) {\\n            revert Launchpeg__MaxSupplyForDevReached();\\n        }\\n        if (_quantity % maxBatchSize != 0) {\\n            revert Launchpeg__CanOnlyMintMultipleOfMaxBatchSize();\\n        }\\n        amountMintedByDevs = amountMintedByDevs + _quantity;\\n        uint256 numChunks = _quantity / maxBatchSize;\\n        for (uint256 i; i < numChunks; i++) {\\n            _mint(msg.sender, maxBatchSize, \\\"\\\", false);\\n        }\\n        emit DevMint(msg.sender, _quantity);\\n    }\\n\\n    /// @notice Withdraw AVAX to the contract owner\\n    /// @param _to Recipient of the earned AVAX\\n    function withdrawAVAX(address _to)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        uint256 amount = address(this).balance;\\n        uint256 fee;\\n        bool sent;\\n\\n        if (joeFeePercent > 0) {\\n            fee = (amount * joeFeePercent) / BASIS_POINT_PRECISION;\\n            amount = amount - fee;\\n\\n            (sent, ) = joeFeeCollector.call{value: fee}(\\\"\\\");\\n            if (!sent) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n\\n        (sent, ) = _to.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert Launchpeg__TransferFailed();\\n        }\\n\\n        emit AvaxWithdraw(_to, amount, fee);\\n    }\\n\\n    /// @notice Reveals the next batch if the reveal conditions are met\\n    function revealNextBatch() external override isEOA {\\n        if (!_revealNextBatch(totalSupply())) {\\n            revert Launchpeg__RevealNextBatchNotAvailable();\\n        }\\n    }\\n\\n    /// @notice Allows ProjectOwner to reveal batches even if the conditions are not met\\n    function forceReveal() external override onlyProjectOwner {\\n        _forceReveal();\\n    }\\n\\n    /// @notice Tells you if a batch can be revealed\\n    /// @return bool Whether reveal can be triggered or not\\n    /// @return uint256 The number of the next batch that will be revealed\\n    function hasBatchToReveal() external view override returns (bool, uint256) {\\n        return _hasBatchToReveal(totalSupply());\\n    }\\n\\n    /// @notice Returns the ownership data of a specific token ID\\n    /// @param _tokenId Token ID\\n    /// @return TokenOwnership Ownership struct for a specific token ID\\n    function getOwnershipData(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (TokenOwnership memory)\\n    {\\n        return _ownershipOf(_tokenId);\\n    }\\n\\n    /// @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n    /// @param _id Token id\\n    /// @return URI Token URI\\n    function tokenURI(uint256 _id)\\n        public\\n        view\\n        override(ERC721AUpgradeable, IERC721MetadataUpgradeable)\\n        returns (string memory)\\n    {\\n        if (_id >= lastTokenRevealed) {\\n            return unrevealedURI;\\n        } else {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        _getShuffledTokenId(_id).toString()\\n                    )\\n                );\\n        }\\n    }\\n\\n    /// @notice Returns the number of NFTs minted by a specific address\\n    /// @param _owner The owner of the NFTs\\n    /// @return numberMinted Number of NFTs minted\\n    function numberMinted(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _numberMinted(_owner);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these IDs are created.\\n    /// This function call must use less than 30 000 gas.\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\\n    /// @return isInterfaceSupported True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721AUpgradeable, ERC2981Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721AUpgradeable.supportsInterface(_interfaceId) ||\\n            ERC2981Upgradeable.supportsInterface(_interfaceId) ||\\n            ERC165Upgradeable.supportsInterface(_interfaceId) ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\\n    /// @param _price The price paid by the sender for minting NFTs\\n    function _refundIfOver(uint256 _price) internal {\\n        if (msg.value < _price) {\\n            revert Launchpeg__NotEnoughAVAX(msg.value);\\n        }\\n        if (msg.value > _price) {\\n            (bool success, ) = msg.sender.call{value: msg.value - _price}(\\\"\\\");\\n            if (!success) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8b296634db1d1e87c6d93e368b049724c7db11f6c2113c96824b5a851175a57\",\"license\":\"MIT\"},\"contracts/BatchReveal.sol\":{\"content\":\"//SPDX-License-Identifier: CC0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./LaunchpegErrors.sol\\\";\\n\\n// Creator: Tubby Cats\\n/// https://github.com/tubby-cats/batch-nft-reveal\\n\\n/// @title BatchReveal\\n/// @notice Implements a gas efficient way of revealing NFT URIs gradually\\nabstract contract BatchReveal is IBatchReveal, Initializable {\\n    /// @dev Initialized on parent contract creation\\n    uint256 private collectionSize;\\n    int128 private intCollectionSize;\\n\\n    /// @notice Size of the batch reveal\\n    /// @dev Must divide collectionSize\\n    uint256 public override revealBatchSize;\\n\\n    /// @notice Randomized seeds used to shuffle TokenURIs\\n    mapping(uint256 => uint256) public override batchToSeed;\\n\\n    /// @notice Last token that has been revealed\\n    uint256 public override lastTokenRevealed = 0;\\n\\n    /// @dev Size of the array that will store already taken URIs numbers\\n    uint256 private _rangeLength;\\n\\n    /// @notice Timestamp for the start of the reveal process\\n    /// @dev Can be set to zero for immediate reveal after token mint\\n    uint256 public override revealStartTime;\\n\\n    /// @notice Time interval for gradual reveal\\n    /// @dev Can be set to zero in order to reveal the collection all at once\\n    uint256 public override revealInterval;\\n\\n    struct Range {\\n        int128 start;\\n        int128 end;\\n    }\\n\\n    /// @dev Emitted on revealNextBatch() and forceReveal()\\n    /// @param batchNumber The batch revealed\\n    /// @param batchSeed The random number drawn\\n    event Reveal(uint256 batchNumber, uint256 batchSeed);\\n\\n    /// @dev BatchReveal initialization\\n    /// @param _revealBatchSize Size of the batch reveal\\n    /// @param _collectionSize Needs to be sent by child contract\\n    function initializeBatchReveal(\\n        uint256 _revealBatchSize,\\n        uint256 _collectionSize\\n    ) internal onlyInitializing {\\n        if (\\n            _collectionSize % _revealBatchSize != 0 ||\\n            _revealBatchSize == 0 ||\\n            _revealBatchSize > _collectionSize\\n        ) {\\n            revert Launchpeg__InvalidBatchRevealSize();\\n        }\\n        revealBatchSize = _revealBatchSize;\\n        collectionSize = _collectionSize;\\n        _rangeLength = (_collectionSize / _revealBatchSize) * 2;\\n        intCollectionSize = int128(int256(_collectionSize));\\n    }\\n\\n    // Forked from openzeppelin\\n    /// @dev Returns the smallest of two numbers.\\n    /// @param _a First number to consider\\n    /// @param _b Second number to consider\\n    /// @return min Minimum between the two params\\n    function _min(int128 _a, int128 _b) internal pure returns (int128) {\\n        return _a < _b ? _a : _b;\\n    }\\n\\n    /// @notice Fills the range array\\n    /// @dev Ranges include the start but not the end [start, end)\\n    /// @param _ranges initial range array\\n    /// @param _start beginning of the array to be added\\n    /// @param _end end of the array to be added\\n    /// @param _lastIndex last position in the range array to consider\\n    /// @return newLastIndex new lastIndex to consider for the future range to be added\\n    function _addRange(\\n        Range[] memory _ranges,\\n        int128 _start,\\n        int128 _end,\\n        uint256 _lastIndex\\n    ) private view returns (uint256) {\\n        uint256 positionToAssume = _lastIndex;\\n        for (uint256 j; j < _lastIndex; j++) {\\n            int128 rangeStart = _ranges[j].start;\\n            int128 rangeEnd = _ranges[j].end;\\n            if (_start < rangeStart && positionToAssume == _lastIndex) {\\n                positionToAssume = j;\\n            }\\n            if (\\n                (_start < rangeStart && _end > rangeStart) ||\\n                (rangeStart <= _start && _end <= rangeEnd) ||\\n                (_start < rangeEnd && _end > rangeEnd)\\n            ) {\\n                int128 length = _end - _start;\\n                _start = _min(_start, rangeStart);\\n                _end = _start + length + (rangeEnd - rangeStart);\\n                _ranges[j] = Range(-1, -1); // Delete\\n            }\\n        }\\n        for (uint256 pos = _lastIndex; pos > positionToAssume; pos--) {\\n            _ranges[pos] = _ranges[pos - 1];\\n        }\\n        _ranges[positionToAssume] = Range(\\n            _start,\\n            _min(_end, intCollectionSize)\\n        );\\n        _lastIndex++;\\n        if (_end > intCollectionSize) {\\n            _addRange(_ranges, 0, _end - intCollectionSize, _lastIndex);\\n            _lastIndex++;\\n        }\\n        return _lastIndex;\\n    }\\n\\n    /// @dev Adds the last batch into the ranges array\\n    /// @param _lastBatch Batch number to consider\\n    /// @return ranges Ranges array filled with every URI taken by batches smaller or equal to lastBatch\\n    function _buildJumps(uint256 _lastBatch)\\n        private\\n        view\\n        returns (Range[] memory)\\n    {\\n        Range[] memory ranges = new Range[](_rangeLength);\\n        uint256 lastIndex;\\n        for (uint256 i; i < _lastBatch; i++) {\\n            int128 start = int128(\\n                int256(_getFreeTokenId(batchToSeed[i], ranges))\\n            );\\n            int128 end = start + int128(int256(revealBatchSize));\\n            lastIndex = _addRange(ranges, start, end, lastIndex);\\n        }\\n        return ranges;\\n    }\\n\\n    /// @dev Gets the random token URI number from tokenId\\n    /// @param _startId Token Id to consider\\n    /// @return uriId Revealed Token URI Id\\n    function _getShuffledTokenId(uint256 _startId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 batch = _startId / revealBatchSize;\\n        Range[] memory ranges = new Range[](_rangeLength);\\n\\n        ranges = _buildJumps(batch);\\n\\n        uint256 positionsToMove = (_startId % revealBatchSize) +\\n            batchToSeed[batch];\\n\\n        return _getFreeTokenId(positionsToMove, ranges);\\n    }\\n\\n    /// @dev Gets the shifted URI number from tokenId and range array\\n    /// @param _positionsToMoveStart Token URI offset if none of the URI Ids were taken\\n    /// @param _ranges Ranges array built by _buildJumps()\\n    /// @return uriId Revealed Token URI Id\\n    function _getFreeTokenId(\\n        uint256 _positionsToMoveStart,\\n        Range[] memory _ranges\\n    ) private view returns (uint256) {\\n        int128 positionsToMove = int128(int256(_positionsToMoveStart));\\n        int128 id;\\n\\n        for (uint256 round = 0; round < 2; round++) {\\n            for (uint256 i; i < _rangeLength; i++) {\\n                int128 start = _ranges[i].start;\\n                int128 end = _ranges[i].end;\\n                if (id < start) {\\n                    int128 finalId = id + positionsToMove;\\n                    if (finalId < start) {\\n                        return uint256(uint128(finalId));\\n                    } else {\\n                        positionsToMove -= start - id;\\n                        id = end;\\n                    }\\n                } else if (id < end) {\\n                    id = end;\\n                }\\n            }\\n            if ((id + positionsToMove) >= intCollectionSize) {\\n                positionsToMove -= intCollectionSize - id;\\n                id = 0;\\n            }\\n        }\\n        return uint256(uint128(id + positionsToMove));\\n    }\\n\\n    /// @dev Sets batch seed for specified batch number\\n    /// @param _batchNumber Batch number that needs to be revealed\\n    function _setBatchSeed(uint256 _batchNumber) internal {\\n        uint256 randomness = uint256(\\n            keccak256(\\n                abi.encode(\\n                    msg.sender,\\n                    tx.gasprice,\\n                    block.number,\\n                    block.timestamp,\\n                    block.difficulty,\\n                    blockhash(block.number - 1),\\n                    address(this)\\n                )\\n            )\\n        );\\n\\n        // not perfectly random since the folding doesn't match bounds perfectly, but difference is small\\n        batchToSeed[_batchNumber] =\\n            randomness %\\n            (collectionSize - (_batchNumber * revealBatchSize));\\n    }\\n\\n    /// @dev Returns true if a batch can be revealed\\n    /// @param _totalSupply Number of token already minted\\n    /// @return hasToRevealInfo Returns a bool saying whether a reveal can be triggered or not\\n    /// and the number of the next batch that will be revealed\\n    function _hasBatchToReveal(uint256 _totalSupply)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        uint256 batchNumber;\\n        unchecked {\\n            batchNumber = lastTokenRevealed / revealBatchSize;\\n        }\\n\\n        if (\\n            block.timestamp < revealStartTime + batchNumber * revealInterval ||\\n            _totalSupply < lastTokenRevealed + revealBatchSize\\n        ) {\\n            return (false, batchNumber);\\n        }\\n\\n        return (true, batchNumber);\\n    }\\n\\n    /// @dev Reveals next batch if possible\\n    /// @param _totalSupply Number of token already minted\\n    /// @return isRevealed Returns false if it is not possible to reveal the next batch\\n    function _revealNextBatch(uint256 _totalSupply) internal returns (bool) {\\n        uint256 batchNumber;\\n        bool canReveal;\\n        (canReveal, batchNumber) = _hasBatchToReveal(_totalSupply);\\n\\n        if (!canReveal) {\\n            return false;\\n        }\\n\\n        lastTokenRevealed += revealBatchSize;\\n        _setBatchSeed(batchNumber);\\n\\n        emit Reveal(batchNumber, batchToSeed[batchNumber]);\\n        return true;\\n    }\\n\\n    /// @dev Force reveal, should be restricted to owner\\n    function _forceReveal() internal {\\n        uint256 batchNumber;\\n        unchecked {\\n            batchNumber = lastTokenRevealed / revealBatchSize;\\n            lastTokenRevealed += revealBatchSize;\\n        }\\n\\n        _setBatchSeed(batchNumber);\\n        emit Reveal(batchNumber, batchToSeed[batchNumber]);\\n    }\\n}\\n\",\"keccak256\":\"0xe408e849cb45d90a9026d28ebf21b383d2c90dcccb881fcf3d687b684be5547d\",\"license\":\"CC0\"},\"contracts/FlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./BaseLaunchpeg.sol\\\";\\n\\n/// @title FlatLaunchpeg\\n/// @author Trader Joe\\n/// @notice Implements a simple minting NFT contract with an allowlist and public sale phase.\\ncontract FlatLaunchpeg is BaseLaunchpeg, IFlatLaunchpeg {\\n    /// @notice Price of one NFT for people on the mint list\\n    /// @dev allowlistPrice is scaled to 1e18\\n    uint256 public override allowlistPrice;\\n\\n    /// @notice Price of one NFT during the public sale\\n    /// @dev salePrice is scaled to 1e18\\n    uint256 public override salePrice;\\n\\n    /// @dev Emitted on initializePhases()\\n    /// @param allowlistStartTime Allowlist mint start time in seconds\\n    /// @param publicSaleStartTime Public sale start time in seconds\\n    /// @param allowlistPrice Price of the allowlist sale in Avax\\n    /// @param salePrice Price of the public sale in Avax\\n    event Initialized(\\n        uint256 allowlistStartTime,\\n        uint256 publicSaleStartTime,\\n        uint256 allowlistPrice,\\n        uint256 salePrice\\n    );\\n\\n    /// @dev Emitted on allowlistMint(), publicSaleMint()\\n    /// @param sender The address that minted\\n    /// @param quantity Amount of NFTs minted\\n    /// @param price Price in AVAX for the NFTs\\n    /// @param tokenId The token ID of the first minted NFT\\n    event Mint(\\n        address indexed sender,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 tokenId\\n    );\\n\\n    /// @dev Emitted on setPublicSaleActive()\\n    /// @param isActive True if the public sale is open, false otherwise\\n    event PublicSaleStateChanged(bool isActive);\\n\\n    modifier atPhase(Phase _phase) {\\n        if (currentPhase() != _phase) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    /// @notice FlatLaunchpeg initialization\\n    /// Can only be called once\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxBatchSize Max amount of NFTs that can be minted at once\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _batchRevealSize Size of the batch reveal\\n    /// @param _revealStartTime Start of the token URIs reveal in seconds\\n    /// @param _revealInterval Interval between two batch reveals in seconds\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        uint256 _batchRevealSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external override initializer {\\n        initializeBaseLaunchpeg(\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxBatchSize,\\n            _collectionSize,\\n            _amountForDevs,\\n            _amountForAllowlist,\\n            _batchRevealSize,\\n            _revealStartTime,\\n            _revealInterval\\n        );\\n    }\\n\\n    /// @notice Initialize the two phases of the sale\\n    /// @dev Can only be called once\\n    /// @param _allowlistStartTime Allowlist mint start time in seconds\\n    /// @param _publicSaleStartTime Public sale start time in seconds\\n    /// @param _allowlistPrice Price of the allowlist sale in Avax\\n    /// @param _salePrice Price of the public sale in Avax\\n    function initializePhases(\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external override onlyOwner atPhase(Phase.NotStarted) {\\n        if (allowlistStartTime != 0) {\\n            revert Launchpeg__PhasesAlreadyInitialized();\\n        }\\n        if (_allowlistStartTime < block.timestamp) {\\n            revert Launchpeg__InvalidStartTime();\\n        }\\n        if (_publicSaleStartTime <= _allowlistStartTime) {\\n            revert Launchpeg__PublicSaleBeforeAllowlist();\\n        }\\n        if (_allowlistPrice > _salePrice) {\\n            revert Launchpeg__InvalidAllowlistPrice();\\n        }\\n\\n        salePrice = _salePrice;\\n        allowlistPrice = _allowlistPrice;\\n\\n        allowlistStartTime = _allowlistStartTime;\\n        publicSaleStartTime = _publicSaleStartTime;\\n\\n        emit Initialized(\\n            allowlistStartTime,\\n            publicSaleStartTime,\\n            allowlistPrice,\\n            salePrice\\n        );\\n    }\\n\\n    /// @notice Mint NFTs during the allowlist mint\\n    /// @param _quantity Quantity of NFTs to mint\\n    function allowlistMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        atPhase(Phase.Allowlist)\\n    {\\n        if (_quantity > allowlist[msg.sender]) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n        if (\\n            totalSupply() + _quantity > collectionSize ||\\n            amountMintedDuringAllowlist + _quantity > amountForAllowlist\\n        ) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        allowlist[msg.sender] -= _quantity;\\n        uint256 totalCost = allowlistPrice * _quantity;\\n\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        amountMintedDuringAllowlist += _quantity;\\n        emit Mint(\\n            msg.sender,\\n            _quantity,\\n            allowlistPrice,\\n            _totalMinted() - _quantity\\n        );\\n        _refundIfOver(totalCost);\\n    }\\n\\n    /// @notice Mint NFTs during the public sale\\n    /// @param _quantity Quantity of NFTs to mint\\n    function publicSaleMint(uint256 _quantity)\\n        external\\n        payable\\n        override\\n        atPhase(Phase.PublicSale)\\n    {\\n        if (numberMinted(msg.sender) + _quantity > maxPerAddressDuringMint) {\\n            revert Launchpeg__CanNotMintThisMany();\\n        }\\n        if (totalSupply() + _quantity > collectionSize) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n        uint256 total = salePrice * _quantity;\\n\\n        _mint(msg.sender, _quantity, \\\"\\\", false);\\n        amountMintedDuringPublicSale += _quantity;\\n        emit Mint(msg.sender, _quantity, salePrice, _totalMinted() - _quantity);\\n        _refundIfOver(total);\\n    }\\n\\n    /// @notice Returns the current phase\\n    /// @return phase Current phase\\n    function currentPhase() public view override returns (Phase) {\\n        if (\\n            allowlistStartTime == 0 ||\\n            publicSaleStartTime == 0 ||\\n            block.timestamp < allowlistStartTime\\n        ) {\\n            return Phase.NotStarted;\\n        } else if (\\n            block.timestamp >= allowlistStartTime &&\\n            block.timestamp < publicSaleStartTime\\n        ) {\\n            return Phase.Allowlist;\\n        }\\n        return Phase.PublicSale;\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these IDs are created.\\n    /// This function call must use less than 30 000 gas.\\n    /// @param _interfaceId InterfaceId to consider. Comes from type(Interface).interfaceId\\n    /// @return isInterfaceSupported True if the considered interface is supported\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(BaseLaunchpeg, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            _interfaceId == type(IFlatLaunchpeg).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2aec945da650fb3efb6f9fbcc128ed4061e23402d449582f37d2590311e7d356\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nerror LaunchpegFactory__InvalidImplementation();\\nerror Launchpeg__PhasesAlreadyInitialized();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__CanOnlyMintMultipleOfMaxBatchSize();\\nerror Launchpeg__EndPriceGreaterThanStartPrice();\\nerror Launchpeg__JoeFeeAlreadyInitialized();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidStartTime();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxBatchSize();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__AllowlistBeforeAuction();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__PublicSaleBeforeAllowlist();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\",\"keccak256\":\"0x535fed91c55a498482ba322a2b0cf7fd7447652c57b7b5c8fc87ba74f47a8354\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        Allowlist,\\n        PublicSale\\n    }\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxBatchSize() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function projectOwner() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\\n        external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setProjectOwner(address _projectOwner) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function revealNextBatch() external;\\n\\n    function forceReveal() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n}\\n\",\"keccak256\":\"0xe18589d964834f30cc80d00ac1ea6fcb63826295c1f2af54951372b0742e2c5f\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBatchReveal {\\n    function revealBatchSize() external view returns (uint256);\\n\\n    function batchToSeed(uint256) external view returns (uint256);\\n\\n    function lastTokenRevealed() external view returns (uint256);\\n\\n    function revealStartTime() external view returns (uint256);\\n\\n    function revealInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb94ad240fd15f845743570267e68cfcb98844495f327d67bbb125acfbf32ee75\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    struct FlatLaunchpegPrices {\\n        uint256 salePrice;\\n        uint256 allowlistPrice;\\n    }\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxBatchSize,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        uint256 _batchRevealSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0x202939f3f1a0271f80d52b3de33f0d698a255faf4a09c7c1846a37f2ba20cab3\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000609b5534801561001557600080fd5b50613e12806100256000396000f3fe6080604052600436106103975760003560e01c806379fecd17116101dc578063c5482fe311610102578063dc33e681116100a0578063f43191951161006f578063f431919514610a6b578063f51f96dd14610a81578063fbe1aa5114610a98578063fe2c7fee14610aaf57600080fd5b8063dc33e681146109eb578063e985e9c514610a0b578063ecbbfea314610a2b578063f2fde38b14610a4b57600080fd5b8063cc0bef84116100dc578063cc0bef8414610988578063d0061f881461099e578063d62b6303146109be578063d9a6f705146109d557600080fd5b8063c5482fe31461093c578063c81e156e14610953578063c87b56dd1461096857600080fd5b8063a22cb4651161017a578063b05863d511610149578063b05863d5146108d6578063b3ab66b0146108f6578063b88d4fde14610909578063c180526a1461092957600080fd5b8063a22cb46514610847578063a2416f7414610867578063a4475ce414610887578063a7cd52cb146108a857600080fd5b806390967a52116101b657806390967a52146107ae5780639231ab2a146107c557806395d89b411461081b578063963331d81461083057600080fd5b806379fecd17146107595780638bc35c2f146107795780638da5cb5b1461079057600080fd5b80633cc4cadb116102c1578063622f1c471161025f5780637035bf181161022e5780637035bf18146106e257806370a08231146106f7578063715018a614610717578063777c90911461072c57600080fd5b8063622f1c47146106815780636352211e146106965780636bb7b1d9146106b65780636c0360eb146106cd57600080fd5b806355f804b31161029b57806355f804b31461061257806359d7bc4d146106325780635bb21376146106495780635c7034af1461066a57600080fd5b80633cc4cadb146105c457806342842e0e146105db57806345c0f533146105fb57600080fd5b80630b56481011610339578063247cd8ad11610308578063247cd8ad146105385780632913daa01461054e5780632a55205a14610565578063375a069a146105a457600080fd5b80630b564810146104bb57806318160ddd146104df5780631c0310a5146104f857806323b872dd1461051857600080fd5b8063055ad42e11610375578063055ad42e1461041f57806306fdde0314610441578063081812fc14610463578063095ea7b31461049b57600080fd5b806301ffc9a71461039c57806302fa7c47146103d157806303851c28146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b736600461377e565b610acf565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103f16103ec3660046136db565b610afa565b005b3480156103ff57600080fd5b50610408610baf565b6040805192151583526020830191909152016103c8565b34801561042b57600080fd5b50610434610bcf565b6040516103c89190613a6a565b34801561044d57600080fd5b50610456610c22565b6040516103c89190613a92565b34801561046f57600080fd5b5061048361047e3660046138ee565b610cb4565b6040516001600160a01b0390911681526020016103c8565b3480156104a757600080fd5b506103f16104b63660046136b1565b610cf8565b3480156104c757600080fd5b506104d160995481565b6040519081526020016103c8565b3480156104eb57600080fd5b50606654606554036104d1565b34801561050457600080fd5b506103f1610513366004613570565b610d86565b34801561052457600080fd5b506103f16105333660046135be565b610f79565b34801561054457600080fd5b506104d1609e5481565b34801561055a57600080fd5b506104d16101385481565b34801561057157600080fd5b5061058561058036600461392a565b610f84565b604080516001600160a01b0390931683526020830191909152016103c8565b3480156105b057600080fd5b506103f16105bf3660046138ee565b611034565b3480156105d057600080fd5b506104d16101415481565b3480156105e757600080fd5b506103f16105f63660046135be565b61118e565b34801561060757600080fd5b506104d16101355481565b34801561061e57600080fd5b506103f161062d3660046137b8565b6111a9565b34801561063e57600080fd5b506104d16101435481565b34801561065557600080fd5b5061013b54610483906001600160a01b031681565b34801561067657600080fd5b506104d16101405481565b34801561068d57600080fd5b506103f161121e565b3480156106a257600080fd5b506104836106b13660046138ee565b611272565b3480156106c257600080fd5b506104d16101445481565b3480156106d957600080fd5b50610456611284565b3480156106ee57600080fd5b50610456611313565b34801561070357600080fd5b506104d1610712366004613570565b611321565b34801561072357600080fd5b506103f161136f565b34801561073857600080fd5b506104d16107473660046138ee565b609a6020526000908152604090205481565b34801561076557600080fd5b506103f1610774366004613829565b6113a3565b34801561078557600080fd5b506104d16101395481565b34801561079c57600080fd5b50609f546001600160a01b0316610483565b3480156107ba57600080fd5b506104d16101455481565b3480156107d157600080fd5b506107e56107e03660046138ee565b61147a565b6040805182516001600160a01b031681526020808401516001600160401b031690820152918101511515908201526060016103c8565b34801561082757600080fd5b506104566114a0565b34801561083c57600080fd5b506104d16101425481565b34801561085357600080fd5b506103f1610862366004613675565b6114af565b34801561087357600080fd5b506103f1610882366004613570565b611545565b34801561089357600080fd5b5061013c54610483906001600160a01b031681565b3480156108b457600080fd5b506104d16108c3366004613570565b61013f6020526000908152604090205481565b3480156108e257600080fd5b506103f16108f1366004613713565b6115e1565b6103f16109043660046138ee565b6116d9565b34801561091557600080fd5b506103f16109243660046135fa565b611831565b6103f16109373660046138ee565b611882565b34801561094857600080fd5b506104d161013a5481565b34801561095f57600080fd5b506103f16119e4565b34801561097457600080fd5b506104566109833660046138ee565b611a18565b34801561099457600080fd5b506104d1609d5481565b3480156109aa57600080fd5b506103f16109b936600461394c565b611af6565b3480156109ca57600080fd5b506104d16101375481565b3480156109e157600080fd5b506104d161271081565b3480156109f757600080fd5b506104d1610a06366004613570565b611c45565b348015610a1757600080fd5b506103bc610a2636600461358b565b611c73565b348015610a3757600080fd5b506103f1610a46366004613907565b611ca1565b348015610a5757600080fd5b506103f1610a66366004613570565b611d9c565b348015610a7757600080fd5b506104d1609b5481565b348015610a8d57600080fd5b506104d16101465481565b348015610aa457600080fd5b506104d16101365481565b348015610abb57600080fd5b506103f1610aca3660046137b8565b611e37565b60006001600160e01b03198216635f2d056560e11b1480610af45750610af482611ea0565b92915050565b609f546001600160a01b03163314610b2d5760405162461bcd60e51b8152600401610b2490613b2a565b60405180910390fd5b6109c4816001600160601b03161115610b59576040516306f644f160e31b815260040160405180910390fd5b610b638282611ed8565b6040516001600160601b03821681526001600160a01b038316907fd85b7816dca44c313f0fdadd9567f99f3620a2fac7c21a8a7872e1ac4d10fe55906020015b60405180910390a25050565b600080610bc7610bc26066546065540390565b611fd6565b915091509091565b60006101435460001480610be4575061014454155b80610bf157506101435442105b15610bfc5750600090565b610143544210158015610c1157506101445442105b15610c1c5750600290565b50600390565b606060678054610c3190613cee565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5d90613cee565b8015610caa5780601f10610c7f57610100808354040283529160200191610caa565b820191906000526020600020905b815481529060010190602001808311610c8d57829003601f168201915b5050505050905090565b6000610cbf82612042565b610cdc576040516333d1c03960e21b815260040160405180910390fd5b506000908152606b60205260409020546001600160a01b031690565b6000610d0382611272565b9050806001600160a01b0316836001600160a01b03161415610d385760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610d585750610d568133611c73565b155b15610d76576040516367d9dca160e11b815260040160405180910390fd5b610d8183838361206e565b505050565b609f546001600160a01b03163314610db05760405162461bcd60e51b8152600401610b2490613b2a565b600260d1541415610e035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b24565b600260d15561013a544790600090819015610eb85761271061013a5484610e2a9190613c25565b610e349190613c11565b9150610e408284613c94565b61013b546040519194506001600160a01b0316908390600081818185875af1925050503d8060008114610e8f576040519150601f19603f3d011682016040523d82523d6000602084013e610e94565b606091505b50508091505080610eb857604051633aa9e60d60e21b815260040160405180910390fd5b6040516001600160a01b038516908490600081818185875af1925050503d8060008114610f01576040519150601f19603f3d011682016040523d82523d6000602084013e610f06565b606091505b50508091505080610f2a57604051633aa9e60d60e21b815260040160405180910390fd5b60408051848152602081018490526001600160a01b038616917f12eb5d7ccd4ce398edc94007dfbaa22fa2ac8775a3633530f36053ad765262f4910160405180910390a25050600160d1555050565b610d818383836120ca565b6000828152610104602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610ffb575060408051808201909152610103546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061101a906001600160601b031687613c25565b6110249190613c11565b91519350909150505b9250929050565b61013c546001600160a01b0316331461106057604051633059e46160e21b815260040160405180910390fd5b61013554816110726066546065540390565b61107c9190613bf9565b111561109b57604051631eddc6a360e11b815260040160405180910390fd5b6101365481610140546110ae9190613bf9565b11156110cd5760405163011310dd60e31b815260040160405180910390fd5b610138546110db9082613d44565b156110f957604051633489d12560e01b815260040160405180910390fd5b80610140546111089190613bf9565b610140556101385460009061111d9083613c11565b905060005b8181101561115b5761114933610138546040518060200160405280600081525060006122b8565b8061115381613d29565b915050611122565b5060405182815233907f7d8400f0e58ae2e14f85b63f3afb0ca5b29328d8f48046b205fc7f174cf9b5ed90602001610ba3565b610d8183838360405180602001604052806000815250611831565b609f546001600160a01b031633146111d35760405162461bcd60e51b8152600401610b2490613b2a565b6111e061013d8383613373565b507ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f661013d6040516112129190613aa5565b60405180910390a15050565b32331461123e57604051633059e46160e21b815260040160405180910390fd5b61125361124e6066546065540390565b61247a565b6112705760405163fc58cf3f60e01b815260040160405180910390fd5b565b600061127d8261250f565b5192915050565b61013d805461129290613cee565b80601f01602080910402602001604051908101604052809291908181526020018280546112be90613cee565b801561130b5780601f106112e05761010080835404028352916020019161130b565b820191906000526020600020905b8154815290600101906020018083116112ee57829003601f168201915b505050505081565b61013e805461129290613cee565b60006001600160a01b03821661134a576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152606a60205260409020546001600160401b031690565b609f546001600160a01b031633146113995760405162461bcd60e51b8152600401610b2490613b2a565b6112706000612629565b600054610100900460ff166113be5760005460ff16156113c2565b303b155b6114255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b24565b600054610100900460ff16158015611447576000805461ffff19166101011790555b61145a8c8c8c8c8c8c8c8c8c8c8c61267b565b801561146c576000805461ff00191690555b505050505050505050505050565b6040805160608101825260008082526020820181905291810191909152610af48261250f565b606060688054610c3190613cee565b6001600160a01b0382163314156114d95760405163b06307db60e01b815260040160405180910390fd5b336000818152606c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b609f546001600160a01b0316331461156f5760405162461bcd60e51b8152600401610b2490613b2a565b6001600160a01b038116611596576040516331ae7ba360e21b815260040160405180910390fd5b61013c80546001600160a01b0319166001600160a01b0383169081179091556040517ff9683e9ced97b7e1d517c5b24e9d1f37f9a0ab14c4865055aad181c8c68a689d90600090a250565b609f546001600160a01b0316331461160b5760405162461bcd60e51b8152600401610b2490613b2a565b8281811461162c57604051638d62a9d560e01b815260040160405180910390fd5b60005b818110156116a85783838281811061164957611649613d9a565b9050602002013561013f600088888581811061166757611667613d9a565b905060200201602081019061167c9190613570565b6001600160a01b03168152602081019190915260400160002055806116a081613d29565b91505061162f565b506040517f0df27beb8d16f5e61d125286ba69a986a702ac83921bb1864629ca5e662e84d490600090a15050505050565b6003806116e4610bcf565b60038111156116f5576116f5613d84565b14611713576040516338df794b60e01b815260040160405180910390fd5b610139548261172133611c45565b61172b9190613bf9565b111561174a576040516335e62b7b60e21b815260040160405180910390fd5b610135548261175c6066546065540390565b6117669190613bf9565b111561178557604051631eddc6a360e11b815260040160405180910390fd5b600082610146546117969190613c25565b90506117b433846040518060200160405280600081525060006122b8565b8261014260008282546117c79190613bf9565b90915550506101465433907fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9085908161180060655490565b61180a9190613c94565b6040805193845260208401929092529082015260600160405180910390a2610d81816127d1565b61183c8484846120ca565b6001600160a01b0383163b1515801561185e575061185c84848484612870565b155b1561187c576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60028061188d610bcf565b600381111561189e5761189e613d84565b146118bc576040516338df794b60e01b815260040160405180910390fd5b33600090815261013f60205260409020548211156118ed576040516390e50aa560e01b815260040160405180910390fd5b61013554826118ff6066546065540390565b6119099190613bf9565b118061192557506101375482610141546119239190613bf9565b115b1561194357604051631eddc6a360e11b815260040160405180910390fd5b33600090815261013f602052604081208054849290611963908490613c94565b90915550506101455460009061197a908490613c25565b905061199833846040518060200160405280600081525060006122b8565b8261014160008282546119ab9190613bf9565b90915550506101455433907fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9085908161180060655490565b61013c546001600160a01b03163314611a1057604051633059e46160e21b815260040160405180910390fd5b611270612968565b6060609b548210611ab65761013e8054611a3190613cee565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5d90613cee565b8015611aaa5780601f10611a7f57610100808354040283529160200191611aaa565b820191906000526020600020905b815481529060010190602001808311611a8d57829003601f168201915b50505050509050919050565b61013d611aca611ac5846129df565b612a9f565b604051602001611adb9291906139aa565b6040516020818303038152906040529050919050565b919050565b609f546001600160a01b03163314611b205760405162461bcd60e51b8152600401610b2490613b2a565b600080611b2b610bcf565b6003811115611b3c57611b3c613d84565b14611b5a576040516338df794b60e01b815260040160405180910390fd5b6101435415611b7c576040516301146db760e31b815260040160405180910390fd5b42851015611b9d57604051639db169d760e01b815260040160405180910390fd5b848411611bbd576040516335bcfe2b60e21b815260040160405180910390fd5b81831115611bde57604051631da61f9760e11b815260040160405180910390fd5b6101468290556101458390556101438590556101448490556040805186815260208101869052908101849052606081018390527f21adc90360bc280b314eb6502b95564cc7180b3d7cdb300b03a8a2f41de14f3e9060800160405180910390a15050505050565b6001600160a01b0381166000908152606a6020526040812054600160401b90046001600160401b0316610af4565b6001600160a01b039182166000908152606c6020908152604080832093909416825291909152205460ff1690565b609f546001600160a01b03163314611ccb5760405162461bcd60e51b8152600401610b2490613b2a565b61013b546001600160a01b031615611cf6576040516345db6e6960e11b815260040160405180910390fd5b612710821115611d19576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b038116611d4057604051631a1b629760e21b815260040160405180910390fd5b61013a82905561013b80546001600160a01b0319166001600160a01b0383169081179091556040805184815260208101929092527fd7d086964f00d2604a80288c460231fe9cfc8e9605e838d49017401111f63adb9101611212565b609f546001600160a01b03163314611dc65760405162461bcd60e51b8152600401610b2490613b2a565b6001600160a01b038116611e2b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b24565b611e3481612629565b50565b609f546001600160a01b03163314611e615760405162461bcd60e51b8152600401610b2490613b2a565b611e6e61013e8383613373565b507f4012c6d278d4b460acbc560e9fa4425e187c3b40c848b8dfa248139729efee4361013e6040516112129190613aa5565b6000611eab82612b9c565b80611eba5750611eba82612bdc565b80611ec95750611ec982612c01565b80610af45750610af482612bdc565b6127106001600160601b0382161115611f465760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610b24565b6001600160a01b038216611f9c5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610b24565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b9091021761010355565b6000806000609954609b5481611fee57611fee613d6e565b049050609e5481611fff9190613c25565b609d5461200c9190613bf9565b4210806120275750609954609b546120249190613bf9565b84105b1561203757600094909350915050565b600194909350915050565b600060655482108015610af4575050600090815260696020526040902054600160e01b900460ff161590565b6000828152606b602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006120d58261250f565b9050836001600160a01b031681600001516001600160a01b03161461210c5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061212a575061212a8533611c73565b8061214557503361213a84610cb4565b6001600160a01b0316145b90508061216557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661218c57604051633a954ecd60e21b815260040160405180910390fd5b6121986000848761206e565b6001600160a01b038581166000908152606a60209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652606990945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661226c57606554821461226c57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6065546001600160a01b0385166122e157604051622e076360e81b815260040160405180910390fd5b836122ff5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b0385166000818152606a6020908152604080832080546001600160801b031981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452606990925290912080546001600160e01b031916909217600160a01b4290921691909102179055808085018380156123a257506001600160a01b0387163b15155b1561242b575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46123f36000888480600101955088612870565b612410576040516368d2bf6b60e11b815260040160405180910390fd5b808214156123a857826065541461242657600080fd5b612471565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082141561242c575b506065556122b1565b600080600061248884611fd6565b925090508061249b575060009392505050565b609954609b60008282546124af9190613bf9565b909155506124be905082612c17565b6000828152609a6020908152604091829020548251858152918201527fc172d6f677c5cb603b93b418c5bbd19afeb3dc6d48a2c4b658254bdae7203b54910160405180910390a15060019392505050565b60408051606081018252600080825260208201819052918101919091528160655481101561261057600081815260696020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061260e5780516001600160a01b0316156125a5579392505050565b5060001901600081815260696020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215612609579392505050565b6125a5565b505b604051636f96cda160e11b815260040160405180910390fd5b609f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166126a25760405162461bcd60e51b8152600401610b2490613b5f565b6126aa612cbb565b6126b2612cea565b6126ba612d19565b6126c48b8b612d40565b6126ce8387612d71565b6001600160a01b0389166126f5576040516331ae7ba360e21b815260040160405180910390fd5b856127008587613bf9565b111561271f57604051631a231d4360e21b815260040160405180910390fd5b8587111561274057604051631ddf40b160e01b815260040160405180910390fd5b61274d426283d600613bf9565b82118061275c5750620d2f0081115b1561277a57604051636de655ff60e01b815260040160405180910390fd5b61013c80546001600160a01b0319166001600160a01b038b161790556127a2886101f4611ed8565b6101388790556101359590955561013995909555506101369190915561013755609d91909155609e5550505050565b803410156127f457604051639968ec3d60e01b8152346004820152602401610b24565b80341115611e34576000336128098334613c94565b604051600081818185875af1925050503d8060008114612845576040519150601f19603f3d011682016040523d82523d6000602084013e61284a565b606091505b505090508061286c57604051633aa9e60d60e21b815260040160405180910390fd5b5050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906128a5903390899088908890600401613a2d565b602060405180830381600087803b1580156128bf57600080fd5b505af19250505080156128ef575060408051601f3d908101601f191682019092526128ec9181019061379b565b60015b61294a573d80801561291d576040519150601f19603f3d011682016040523d82523d6000602084013e612922565b606091505b508051612942576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6000609954609b548161297d5761297d613d6e565b609954609b8054909101905504905061299581612c17565b6000818152609a6020908152604091829020548251848152918201527fc172d6f677c5cb603b93b418c5bbd19afeb3dc6d48a2c4b658254bdae7203b54910160405180910390a150565b600080609954836129f09190613c11565b90506000609c546001600160401b03811115612a0e57612a0e613db0565b604051908082528060200260200182016040528015612a5357816020015b6040805180820190915260008082526020820152815260200190600190039081612a2c5790505b509050612a5f82612e1f565b6000838152609a60205260408120546099549293509091612a809087613d44565b612a8a9190613bf9565b9050612a968183612eea565b95945050505050565b606081612ac35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612aed5780612ad781613d29565b9150612ae69050600a83613c11565b9150612ac7565b6000816001600160401b03811115612b0757612b07613db0565b6040519080825280601f01601f191660200182016040528015612b31576020820181803683370190505b5090505b841561296057612b46600183613c94565b9150612b53600a86613d44565b612b5e906030613bf9565b60f81b818381518110612b7357612b73613d9a565b60200101906001600160f81b031916908160001a905350612b95600a86613c11565b9450612b35565b60006001600160e01b031982166380ac58cd60e01b1480612bcd57506001600160e01b03198216635b5e139f60e01b145b80610af45750610af482612c01565b60006001600160e01b0319821663152a902d60e11b1480610af45750610af482612b9c565b6001600160e01b0319166301ffc9a760e01b1490565b6000333a434244612c29600184613c94565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08301524060c08201523060e0820152610100016040516020818303038152906040528051906020012060001c905060995482612c8e9190613c25565b609754612c9b9190613c94565b612ca59082613d44565b6000928352609a60205260409092209190915550565b600054610100900460ff16612ce25760405162461bcd60e51b8152600401610b2490613b5f565b61127061303f565b600054610100900460ff16612d115760405162461bcd60e51b8152600401610b2490613b5f565b61127061306f565b600054610100900460ff166112705760405162461bcd60e51b8152600401610b2490613b5f565b600054610100900460ff16612d675760405162461bcd60e51b8152600401610b2490613b5f565b61286c828261309d565b600054610100900460ff16612d985760405162461bcd60e51b8152600401610b2490613b5f565b612da28282613d44565b151580612dad575081155b80612db757508082115b15612dd557604051636d0ca73b60e11b815260040160405180910390fd5b60998290556097819055612de98282613c11565b612df4906002613c25565b609c5560988054600f9290920b6001600160801b03166001600160801b031990921691909117905550565b60606000609c546001600160401b03811115612e3d57612e3d613db0565b604051908082528060200260200182016040528015612e8257816020015b6040805180820190915260008082526020820152815260200190600190039081612e5b5790505b5090506000805b84811015612ee1576000818152609a6020526040812054612eaa9085612eea565b9050600060995482612ebc9190613baa565b9050612eca858383876130f5565b935050508080612ed990613d29565b915050612e89565b50909392505050565b60008281805b60028110156130225760005b609c54811015612fd1576000868281518110612f1a57612f1a613d9a565b60200260200101516000015190506000878381518110612f3c57612f3c613d9a565b602002602001015160200151905081600f0b85600f0b1215612faa576000612f648787613baa565b905082600f0b81600f0b1215612f8b576001600160801b03169650610af495505050505050565b612f958684613c44565b612f9f9088613c44565b965081955050612fbc565b80600f0b85600f0b1215612fbc578094505b50508080612fc990613d29565b915050612efc565b50609854600f90810b900b612fe68484613baa565b600f0b1261301057609854612fff908390600f0b613c44565b6130099084613c44565b9250600091505b8061301a81613d29565b915050612ef0565b5061302d8282613baa565b6001600160801b031695945050505050565b600054610100900460ff166130665760405162461bcd60e51b8152600401610b2490613b5f565b61127033612629565b600054610100900460ff166130965760405162461bcd60e51b8152600401610b2490613b5f565b600160d155565b600054610100900460ff166130c45760405162461bcd60e51b8152600401610b2490613b5f565b81516130d79060679060208501906133f7565b5080516130eb9060689060208401906133f7565b5060006065555050565b600081815b8381101561325157600087828151811061311657613116613d9a565b6020026020010151600001519050600088838151811061313857613138613d9a565b602002602001015160200151905081600f0b88600f0b12801561315a57508584145b15613163578293505b81600f0b88600f0b12801561317d575081600f0b87600f0b135b8061319f575087600f0b82600f0b1315801561319f575080600f0b87600f0b13155b806131bf575080600f0b88600f0b1280156131bf575080600f0b87600f0b135b1561323c5760006131d08989613c44565b90506131dc8984613355565b98506131e88383613c44565b6131f2828b613baa565b6131fc9190613baa565b97506040518060400160405280600019600f0b8152602001600019600f0b8152508a858151811061322f5761322f613d9a565b6020026020010181905250505b5050808061324990613d29565b9150506130fa565b50825b818111156132b05786613268600183613c94565b8151811061327857613278613d9a565b602002602001015187828151811061329257613292613d9a565b602002602001018190525080806132a890613cd7565b915050613254565b5060408051808201909152600f86810b825260985460208301916132d69188910b613355565b600f0b8152508682815181106132ee576132ee613d9a565b6020026020010181905250828061330490613d29565b609854909450600f90810b810b9086900b1315905061334b5760985461333c90879060009061333690600f0b88613c44565b866130f5565b508261334781613d29565b9350505b5090949350505050565b600081600f0b83600f0b1261336a578161336c565b825b9392505050565b82805461337f90613cee565b90600052602060002090601f0160209004810192826133a157600085556133e7565b82601f106133ba5782800160ff198235161785556133e7565b828001600101855582156133e7579182015b828111156133e75782358255916020019190600101906133cc565b506133f392915061346b565b5090565b82805461340390613cee565b90600052602060002090601f01602090048101928261342557600085556133e7565b82601f1061343e57805160ff19168380011785556133e7565b828001600101855582156133e7579182015b828111156133e7578251825591602001919060010190613450565b5b808211156133f3576000815560010161346c565b60006001600160401b038084111561349a5761349a613db0565b604051601f8501601f19908116603f011681019082821181831017156134c2576134c2613db0565b816040528093508581528686860111156134db57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611af157600080fd5b60008083601f84011261351e57600080fd5b5081356001600160401b0381111561353557600080fd5b6020830191508360208260051b850101111561102d57600080fd5b600082601f83011261356157600080fd5b61336c83833560208501613480565b60006020828403121561358257600080fd5b61336c826134f5565b6000806040838503121561359e57600080fd5b6135a7836134f5565b91506135b5602084016134f5565b90509250929050565b6000806000606084860312156135d357600080fd5b6135dc846134f5565b92506135ea602085016134f5565b9150604084013590509250925092565b6000806000806080858703121561361057600080fd5b613619856134f5565b9350613627602086016134f5565b92506040850135915060608501356001600160401b0381111561364957600080fd5b8501601f8101871361365a57600080fd5b61366987823560208401613480565b91505092959194509250565b6000806040838503121561368857600080fd5b613691836134f5565b9150602083013580151581146136a657600080fd5b809150509250929050565b600080604083850312156136c457600080fd5b6136cd836134f5565b946020939093013593505050565b600080604083850312156136ee57600080fd5b6136f7836134f5565b915060208301356001600160601b03811681146136a657600080fd5b6000806000806040858703121561372957600080fd5b84356001600160401b038082111561374057600080fd5b61374c8883890161350c565b9096509450602087013591508082111561376557600080fd5b506137728782880161350c565b95989497509550505050565b60006020828403121561379057600080fd5b813561336c81613dc6565b6000602082840312156137ad57600080fd5b815161336c81613dc6565b600080602083850312156137cb57600080fd5b82356001600160401b03808211156137e257600080fd5b818501915085601f8301126137f657600080fd5b81358181111561380557600080fd5b86602082850101111561381757600080fd5b60209290920196919550909350505050565b60008060008060008060008060008060006101608c8e03121561384b57600080fd5b6001600160401b03808d35111561386157600080fd5b61386e8e8e358f01613550565b9b508060208e0135111561388157600080fd5b506138928d60208e01358e01613550565b99506138a060408d016134f5565b98506138ae60608d016134f5565b9a9d999c50979a60808101359960a0820135995060c0820135985060e0820135975061010082013596506101208201359550610140909101359350915050565b60006020828403121561390057600080fd5b5035919050565b6000806040838503121561391a57600080fd5b823591506135b5602084016134f5565b6000806040838503121561393d57600080fd5b50508035926020909101359150565b6000806000806080858703121561396257600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613996816020860160208601613cab565b601f01601f19169290920160200192915050565b60008084546139b881613cee565b600182811680156139d057600181146139e157613a10565b60ff19841687528287019450613a10565b8860005260208060002060005b85811015613a075781548a8201529084019082016139ee565b50505082870194505b505050508351613a24818360208801613cab565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a609083018461397e565b9695505050505050565b6020810160048310613a8c57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061336c602083018461397e565b6000602080835260008454613ab981613cee565b80848701526040600180841660008114613ada5760018114613aee57613b1c565b60ff19851689840152606089019550613b1c565b896000528660002060005b85811015613b145781548b8201860152908301908801613af9565b8a0184019650505b509398975050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600f0b83600f0b600082128260016001607f1b0303821381151615613bd457613bd4613d58565b8260016001607f1b0319038212811615613bf057613bf0613d58565b50019392505050565b60008219821115613c0c57613c0c613d58565b500190565b600082613c2057613c20613d6e565b500490565b6000816000190483118215151615613c3f57613c3f613d58565b500290565b600081600f0b83600f0b600081128160016001607f1b031901831281151615613c6f57613c6f613d58565b8160016001607f1b03018313811615613c8a57613c8a613d58565b5090039392505050565b600082821015613ca657613ca6613d58565b500390565b60005b83811015613cc6578181015183820152602001613cae565b8381111561187c5750506000910152565b600081613ce657613ce6613d58565b506000190190565b600181811c90821680613d0257607f821691505b60208210811415613d2357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d3d57613d3d613d58565b5060010190565b600082613d5357613d53613d6e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611e3457600080fdfea2646970667358221220aaa2ffa1597d57158dd2455a9812ef55020edf481a4146831027e22d524467e664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106103975760003560e01c806379fecd17116101dc578063c5482fe311610102578063dc33e681116100a0578063f43191951161006f578063f431919514610a6b578063f51f96dd14610a81578063fbe1aa5114610a98578063fe2c7fee14610aaf57600080fd5b8063dc33e681146109eb578063e985e9c514610a0b578063ecbbfea314610a2b578063f2fde38b14610a4b57600080fd5b8063cc0bef84116100dc578063cc0bef8414610988578063d0061f881461099e578063d62b6303146109be578063d9a6f705146109d557600080fd5b8063c5482fe31461093c578063c81e156e14610953578063c87b56dd1461096857600080fd5b8063a22cb4651161017a578063b05863d511610149578063b05863d5146108d6578063b3ab66b0146108f6578063b88d4fde14610909578063c180526a1461092957600080fd5b8063a22cb46514610847578063a2416f7414610867578063a4475ce414610887578063a7cd52cb146108a857600080fd5b806390967a52116101b657806390967a52146107ae5780639231ab2a146107c557806395d89b411461081b578063963331d81461083057600080fd5b806379fecd17146107595780638bc35c2f146107795780638da5cb5b1461079057600080fd5b80633cc4cadb116102c1578063622f1c471161025f5780637035bf181161022e5780637035bf18146106e257806370a08231146106f7578063715018a614610717578063777c90911461072c57600080fd5b8063622f1c47146106815780636352211e146106965780636bb7b1d9146106b65780636c0360eb146106cd57600080fd5b806355f804b31161029b57806355f804b31461061257806359d7bc4d146106325780635bb21376146106495780635c7034af1461066a57600080fd5b80633cc4cadb146105c457806342842e0e146105db57806345c0f533146105fb57600080fd5b80630b56481011610339578063247cd8ad11610308578063247cd8ad146105385780632913daa01461054e5780632a55205a14610565578063375a069a146105a457600080fd5b80630b564810146104bb57806318160ddd146104df5780631c0310a5146104f857806323b872dd1461051857600080fd5b8063055ad42e11610375578063055ad42e1461041f57806306fdde0314610441578063081812fc14610463578063095ea7b31461049b57600080fd5b806301ffc9a71461039c57806302fa7c47146103d157806303851c28146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b736600461377e565b610acf565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103f16103ec3660046136db565b610afa565b005b3480156103ff57600080fd5b50610408610baf565b6040805192151583526020830191909152016103c8565b34801561042b57600080fd5b50610434610bcf565b6040516103c89190613a6a565b34801561044d57600080fd5b50610456610c22565b6040516103c89190613a92565b34801561046f57600080fd5b5061048361047e3660046138ee565b610cb4565b6040516001600160a01b0390911681526020016103c8565b3480156104a757600080fd5b506103f16104b63660046136b1565b610cf8565b3480156104c757600080fd5b506104d160995481565b6040519081526020016103c8565b3480156104eb57600080fd5b50606654606554036104d1565b34801561050457600080fd5b506103f1610513366004613570565b610d86565b34801561052457600080fd5b506103f16105333660046135be565b610f79565b34801561054457600080fd5b506104d1609e5481565b34801561055a57600080fd5b506104d16101385481565b34801561057157600080fd5b5061058561058036600461392a565b610f84565b604080516001600160a01b0390931683526020830191909152016103c8565b3480156105b057600080fd5b506103f16105bf3660046138ee565b611034565b3480156105d057600080fd5b506104d16101415481565b3480156105e757600080fd5b506103f16105f63660046135be565b61118e565b34801561060757600080fd5b506104d16101355481565b34801561061e57600080fd5b506103f161062d3660046137b8565b6111a9565b34801561063e57600080fd5b506104d16101435481565b34801561065557600080fd5b5061013b54610483906001600160a01b031681565b34801561067657600080fd5b506104d16101405481565b34801561068d57600080fd5b506103f161121e565b3480156106a257600080fd5b506104836106b13660046138ee565b611272565b3480156106c257600080fd5b506104d16101445481565b3480156106d957600080fd5b50610456611284565b3480156106ee57600080fd5b50610456611313565b34801561070357600080fd5b506104d1610712366004613570565b611321565b34801561072357600080fd5b506103f161136f565b34801561073857600080fd5b506104d16107473660046138ee565b609a6020526000908152604090205481565b34801561076557600080fd5b506103f1610774366004613829565b6113a3565b34801561078557600080fd5b506104d16101395481565b34801561079c57600080fd5b50609f546001600160a01b0316610483565b3480156107ba57600080fd5b506104d16101455481565b3480156107d157600080fd5b506107e56107e03660046138ee565b61147a565b6040805182516001600160a01b031681526020808401516001600160401b031690820152918101511515908201526060016103c8565b34801561082757600080fd5b506104566114a0565b34801561083c57600080fd5b506104d16101425481565b34801561085357600080fd5b506103f1610862366004613675565b6114af565b34801561087357600080fd5b506103f1610882366004613570565b611545565b34801561089357600080fd5b5061013c54610483906001600160a01b031681565b3480156108b457600080fd5b506104d16108c3366004613570565b61013f6020526000908152604090205481565b3480156108e257600080fd5b506103f16108f1366004613713565b6115e1565b6103f16109043660046138ee565b6116d9565b34801561091557600080fd5b506103f16109243660046135fa565b611831565b6103f16109373660046138ee565b611882565b34801561094857600080fd5b506104d161013a5481565b34801561095f57600080fd5b506103f16119e4565b34801561097457600080fd5b506104566109833660046138ee565b611a18565b34801561099457600080fd5b506104d1609d5481565b3480156109aa57600080fd5b506103f16109b936600461394c565b611af6565b3480156109ca57600080fd5b506104d16101375481565b3480156109e157600080fd5b506104d161271081565b3480156109f757600080fd5b506104d1610a06366004613570565b611c45565b348015610a1757600080fd5b506103bc610a2636600461358b565b611c73565b348015610a3757600080fd5b506103f1610a46366004613907565b611ca1565b348015610a5757600080fd5b506103f1610a66366004613570565b611d9c565b348015610a7757600080fd5b506104d1609b5481565b348015610a8d57600080fd5b506104d16101465481565b348015610aa457600080fd5b506104d16101365481565b348015610abb57600080fd5b506103f1610aca3660046137b8565b611e37565b60006001600160e01b03198216635f2d056560e11b1480610af45750610af482611ea0565b92915050565b609f546001600160a01b03163314610b2d5760405162461bcd60e51b8152600401610b2490613b2a565b60405180910390fd5b6109c4816001600160601b03161115610b59576040516306f644f160e31b815260040160405180910390fd5b610b638282611ed8565b6040516001600160601b03821681526001600160a01b038316907fd85b7816dca44c313f0fdadd9567f99f3620a2fac7c21a8a7872e1ac4d10fe55906020015b60405180910390a25050565b600080610bc7610bc26066546065540390565b611fd6565b915091509091565b60006101435460001480610be4575061014454155b80610bf157506101435442105b15610bfc5750600090565b610143544210158015610c1157506101445442105b15610c1c5750600290565b50600390565b606060678054610c3190613cee565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5d90613cee565b8015610caa5780601f10610c7f57610100808354040283529160200191610caa565b820191906000526020600020905b815481529060010190602001808311610c8d57829003601f168201915b5050505050905090565b6000610cbf82612042565b610cdc576040516333d1c03960e21b815260040160405180910390fd5b506000908152606b60205260409020546001600160a01b031690565b6000610d0382611272565b9050806001600160a01b0316836001600160a01b03161415610d385760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610d585750610d568133611c73565b155b15610d76576040516367d9dca160e11b815260040160405180910390fd5b610d8183838361206e565b505050565b609f546001600160a01b03163314610db05760405162461bcd60e51b8152600401610b2490613b2a565b600260d1541415610e035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b24565b600260d15561013a544790600090819015610eb85761271061013a5484610e2a9190613c25565b610e349190613c11565b9150610e408284613c94565b61013b546040519194506001600160a01b0316908390600081818185875af1925050503d8060008114610e8f576040519150601f19603f3d011682016040523d82523d6000602084013e610e94565b606091505b50508091505080610eb857604051633aa9e60d60e21b815260040160405180910390fd5b6040516001600160a01b038516908490600081818185875af1925050503d8060008114610f01576040519150601f19603f3d011682016040523d82523d6000602084013e610f06565b606091505b50508091505080610f2a57604051633aa9e60d60e21b815260040160405180910390fd5b60408051848152602081018490526001600160a01b038616917f12eb5d7ccd4ce398edc94007dfbaa22fa2ac8775a3633530f36053ad765262f4910160405180910390a25050600160d1555050565b610d818383836120ca565b6000828152610104602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610ffb575060408051808201909152610103546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061101a906001600160601b031687613c25565b6110249190613c11565b91519350909150505b9250929050565b61013c546001600160a01b0316331461106057604051633059e46160e21b815260040160405180910390fd5b61013554816110726066546065540390565b61107c9190613bf9565b111561109b57604051631eddc6a360e11b815260040160405180910390fd5b6101365481610140546110ae9190613bf9565b11156110cd5760405163011310dd60e31b815260040160405180910390fd5b610138546110db9082613d44565b156110f957604051633489d12560e01b815260040160405180910390fd5b80610140546111089190613bf9565b610140556101385460009061111d9083613c11565b905060005b8181101561115b5761114933610138546040518060200160405280600081525060006122b8565b8061115381613d29565b915050611122565b5060405182815233907f7d8400f0e58ae2e14f85b63f3afb0ca5b29328d8f48046b205fc7f174cf9b5ed90602001610ba3565b610d8183838360405180602001604052806000815250611831565b609f546001600160a01b031633146111d35760405162461bcd60e51b8152600401610b2490613b2a565b6111e061013d8383613373565b507ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f661013d6040516112129190613aa5565b60405180910390a15050565b32331461123e57604051633059e46160e21b815260040160405180910390fd5b61125361124e6066546065540390565b61247a565b6112705760405163fc58cf3f60e01b815260040160405180910390fd5b565b600061127d8261250f565b5192915050565b61013d805461129290613cee565b80601f01602080910402602001604051908101604052809291908181526020018280546112be90613cee565b801561130b5780601f106112e05761010080835404028352916020019161130b565b820191906000526020600020905b8154815290600101906020018083116112ee57829003601f168201915b505050505081565b61013e805461129290613cee565b60006001600160a01b03821661134a576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152606a60205260409020546001600160401b031690565b609f546001600160a01b031633146113995760405162461bcd60e51b8152600401610b2490613b2a565b6112706000612629565b600054610100900460ff166113be5760005460ff16156113c2565b303b155b6114255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b24565b600054610100900460ff16158015611447576000805461ffff19166101011790555b61145a8c8c8c8c8c8c8c8c8c8c8c61267b565b801561146c576000805461ff00191690555b505050505050505050505050565b6040805160608101825260008082526020820181905291810191909152610af48261250f565b606060688054610c3190613cee565b6001600160a01b0382163314156114d95760405163b06307db60e01b815260040160405180910390fd5b336000818152606c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b609f546001600160a01b0316331461156f5760405162461bcd60e51b8152600401610b2490613b2a565b6001600160a01b038116611596576040516331ae7ba360e21b815260040160405180910390fd5b61013c80546001600160a01b0319166001600160a01b0383169081179091556040517ff9683e9ced97b7e1d517c5b24e9d1f37f9a0ab14c4865055aad181c8c68a689d90600090a250565b609f546001600160a01b0316331461160b5760405162461bcd60e51b8152600401610b2490613b2a565b8281811461162c57604051638d62a9d560e01b815260040160405180910390fd5b60005b818110156116a85783838281811061164957611649613d9a565b9050602002013561013f600088888581811061166757611667613d9a565b905060200201602081019061167c9190613570565b6001600160a01b03168152602081019190915260400160002055806116a081613d29565b91505061162f565b506040517f0df27beb8d16f5e61d125286ba69a986a702ac83921bb1864629ca5e662e84d490600090a15050505050565b6003806116e4610bcf565b60038111156116f5576116f5613d84565b14611713576040516338df794b60e01b815260040160405180910390fd5b610139548261172133611c45565b61172b9190613bf9565b111561174a576040516335e62b7b60e21b815260040160405180910390fd5b610135548261175c6066546065540390565b6117669190613bf9565b111561178557604051631eddc6a360e11b815260040160405180910390fd5b600082610146546117969190613c25565b90506117b433846040518060200160405280600081525060006122b8565b8261014260008282546117c79190613bf9565b90915550506101465433907fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9085908161180060655490565b61180a9190613c94565b6040805193845260208401929092529082015260600160405180910390a2610d81816127d1565b61183c8484846120ca565b6001600160a01b0383163b1515801561185e575061185c84848484612870565b155b1561187c576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60028061188d610bcf565b600381111561189e5761189e613d84565b146118bc576040516338df794b60e01b815260040160405180910390fd5b33600090815261013f60205260409020548211156118ed576040516390e50aa560e01b815260040160405180910390fd5b61013554826118ff6066546065540390565b6119099190613bf9565b118061192557506101375482610141546119239190613bf9565b115b1561194357604051631eddc6a360e11b815260040160405180910390fd5b33600090815261013f602052604081208054849290611963908490613c94565b90915550506101455460009061197a908490613c25565b905061199833846040518060200160405280600081525060006122b8565b8261014160008282546119ab9190613bf9565b90915550506101455433907fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb9085908161180060655490565b61013c546001600160a01b03163314611a1057604051633059e46160e21b815260040160405180910390fd5b611270612968565b6060609b548210611ab65761013e8054611a3190613cee565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5d90613cee565b8015611aaa5780601f10611a7f57610100808354040283529160200191611aaa565b820191906000526020600020905b815481529060010190602001808311611a8d57829003601f168201915b50505050509050919050565b61013d611aca611ac5846129df565b612a9f565b604051602001611adb9291906139aa565b6040516020818303038152906040529050919050565b919050565b609f546001600160a01b03163314611b205760405162461bcd60e51b8152600401610b2490613b2a565b600080611b2b610bcf565b6003811115611b3c57611b3c613d84565b14611b5a576040516338df794b60e01b815260040160405180910390fd5b6101435415611b7c576040516301146db760e31b815260040160405180910390fd5b42851015611b9d57604051639db169d760e01b815260040160405180910390fd5b848411611bbd576040516335bcfe2b60e21b815260040160405180910390fd5b81831115611bde57604051631da61f9760e11b815260040160405180910390fd5b6101468290556101458390556101438590556101448490556040805186815260208101869052908101849052606081018390527f21adc90360bc280b314eb6502b95564cc7180b3d7cdb300b03a8a2f41de14f3e9060800160405180910390a15050505050565b6001600160a01b0381166000908152606a6020526040812054600160401b90046001600160401b0316610af4565b6001600160a01b039182166000908152606c6020908152604080832093909416825291909152205460ff1690565b609f546001600160a01b03163314611ccb5760405162461bcd60e51b8152600401610b2490613b2a565b61013b546001600160a01b031615611cf6576040516345db6e6960e11b815260040160405180910390fd5b612710821115611d19576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b038116611d4057604051631a1b629760e21b815260040160405180910390fd5b61013a82905561013b80546001600160a01b0319166001600160a01b0383169081179091556040805184815260208101929092527fd7d086964f00d2604a80288c460231fe9cfc8e9605e838d49017401111f63adb9101611212565b609f546001600160a01b03163314611dc65760405162461bcd60e51b8152600401610b2490613b2a565b6001600160a01b038116611e2b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b24565b611e3481612629565b50565b609f546001600160a01b03163314611e615760405162461bcd60e51b8152600401610b2490613b2a565b611e6e61013e8383613373565b507f4012c6d278d4b460acbc560e9fa4425e187c3b40c848b8dfa248139729efee4361013e6040516112129190613aa5565b6000611eab82612b9c565b80611eba5750611eba82612bdc565b80611ec95750611ec982612c01565b80610af45750610af482612bdc565b6127106001600160601b0382161115611f465760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610b24565b6001600160a01b038216611f9c5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610b24565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b9091021761010355565b6000806000609954609b5481611fee57611fee613d6e565b049050609e5481611fff9190613c25565b609d5461200c9190613bf9565b4210806120275750609954609b546120249190613bf9565b84105b1561203757600094909350915050565b600194909350915050565b600060655482108015610af4575050600090815260696020526040902054600160e01b900460ff161590565b6000828152606b602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006120d58261250f565b9050836001600160a01b031681600001516001600160a01b03161461210c5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061212a575061212a8533611c73565b8061214557503361213a84610cb4565b6001600160a01b0316145b90508061216557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661218c57604051633a954ecd60e21b815260040160405180910390fd5b6121986000848761206e565b6001600160a01b038581166000908152606a60209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652606990945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661226c57606554821461226c57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6065546001600160a01b0385166122e157604051622e076360e81b815260040160405180910390fd5b836122ff5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b0385166000818152606a6020908152604080832080546001600160801b031981166001600160401b038083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452606990925290912080546001600160e01b031916909217600160a01b4290921691909102179055808085018380156123a257506001600160a01b0387163b15155b1561242b575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46123f36000888480600101955088612870565b612410576040516368d2bf6b60e11b815260040160405180910390fd5b808214156123a857826065541461242657600080fd5b612471565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082141561242c575b506065556122b1565b600080600061248884611fd6565b925090508061249b575060009392505050565b609954609b60008282546124af9190613bf9565b909155506124be905082612c17565b6000828152609a6020908152604091829020548251858152918201527fc172d6f677c5cb603b93b418c5bbd19afeb3dc6d48a2c4b658254bdae7203b54910160405180910390a15060019392505050565b60408051606081018252600080825260208201819052918101919091528160655481101561261057600081815260696020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061260e5780516001600160a01b0316156125a5579392505050565b5060001901600081815260696020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215612609579392505050565b6125a5565b505b604051636f96cda160e11b815260040160405180910390fd5b609f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166126a25760405162461bcd60e51b8152600401610b2490613b5f565b6126aa612cbb565b6126b2612cea565b6126ba612d19565b6126c48b8b612d40565b6126ce8387612d71565b6001600160a01b0389166126f5576040516331ae7ba360e21b815260040160405180910390fd5b856127008587613bf9565b111561271f57604051631a231d4360e21b815260040160405180910390fd5b8587111561274057604051631ddf40b160e01b815260040160405180910390fd5b61274d426283d600613bf9565b82118061275c5750620d2f0081115b1561277a57604051636de655ff60e01b815260040160405180910390fd5b61013c80546001600160a01b0319166001600160a01b038b161790556127a2886101f4611ed8565b6101388790556101359590955561013995909555506101369190915561013755609d91909155609e5550505050565b803410156127f457604051639968ec3d60e01b8152346004820152602401610b24565b80341115611e34576000336128098334613c94565b604051600081818185875af1925050503d8060008114612845576040519150601f19603f3d011682016040523d82523d6000602084013e61284a565b606091505b505090508061286c57604051633aa9e60d60e21b815260040160405180910390fd5b5050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906128a5903390899088908890600401613a2d565b602060405180830381600087803b1580156128bf57600080fd5b505af19250505080156128ef575060408051601f3d908101601f191682019092526128ec9181019061379b565b60015b61294a573d80801561291d576040519150601f19603f3d011682016040523d82523d6000602084013e612922565b606091505b508051612942576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6000609954609b548161297d5761297d613d6e565b609954609b8054909101905504905061299581612c17565b6000818152609a6020908152604091829020548251848152918201527fc172d6f677c5cb603b93b418c5bbd19afeb3dc6d48a2c4b658254bdae7203b54910160405180910390a150565b600080609954836129f09190613c11565b90506000609c546001600160401b03811115612a0e57612a0e613db0565b604051908082528060200260200182016040528015612a5357816020015b6040805180820190915260008082526020820152815260200190600190039081612a2c5790505b509050612a5f82612e1f565b6000838152609a60205260408120546099549293509091612a809087613d44565b612a8a9190613bf9565b9050612a968183612eea565b95945050505050565b606081612ac35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612aed5780612ad781613d29565b9150612ae69050600a83613c11565b9150612ac7565b6000816001600160401b03811115612b0757612b07613db0565b6040519080825280601f01601f191660200182016040528015612b31576020820181803683370190505b5090505b841561296057612b46600183613c94565b9150612b53600a86613d44565b612b5e906030613bf9565b60f81b818381518110612b7357612b73613d9a565b60200101906001600160f81b031916908160001a905350612b95600a86613c11565b9450612b35565b60006001600160e01b031982166380ac58cd60e01b1480612bcd57506001600160e01b03198216635b5e139f60e01b145b80610af45750610af482612c01565b60006001600160e01b0319821663152a902d60e11b1480610af45750610af482612b9c565b6001600160e01b0319166301ffc9a760e01b1490565b6000333a434244612c29600184613c94565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08301524060c08201523060e0820152610100016040516020818303038152906040528051906020012060001c905060995482612c8e9190613c25565b609754612c9b9190613c94565b612ca59082613d44565b6000928352609a60205260409092209190915550565b600054610100900460ff16612ce25760405162461bcd60e51b8152600401610b2490613b5f565b61127061303f565b600054610100900460ff16612d115760405162461bcd60e51b8152600401610b2490613b5f565b61127061306f565b600054610100900460ff166112705760405162461bcd60e51b8152600401610b2490613b5f565b600054610100900460ff16612d675760405162461bcd60e51b8152600401610b2490613b5f565b61286c828261309d565b600054610100900460ff16612d985760405162461bcd60e51b8152600401610b2490613b5f565b612da28282613d44565b151580612dad575081155b80612db757508082115b15612dd557604051636d0ca73b60e11b815260040160405180910390fd5b60998290556097819055612de98282613c11565b612df4906002613c25565b609c5560988054600f9290920b6001600160801b03166001600160801b031990921691909117905550565b60606000609c546001600160401b03811115612e3d57612e3d613db0565b604051908082528060200260200182016040528015612e8257816020015b6040805180820190915260008082526020820152815260200190600190039081612e5b5790505b5090506000805b84811015612ee1576000818152609a6020526040812054612eaa9085612eea565b9050600060995482612ebc9190613baa565b9050612eca858383876130f5565b935050508080612ed990613d29565b915050612e89565b50909392505050565b60008281805b60028110156130225760005b609c54811015612fd1576000868281518110612f1a57612f1a613d9a565b60200260200101516000015190506000878381518110612f3c57612f3c613d9a565b602002602001015160200151905081600f0b85600f0b1215612faa576000612f648787613baa565b905082600f0b81600f0b1215612f8b576001600160801b03169650610af495505050505050565b612f958684613c44565b612f9f9088613c44565b965081955050612fbc565b80600f0b85600f0b1215612fbc578094505b50508080612fc990613d29565b915050612efc565b50609854600f90810b900b612fe68484613baa565b600f0b1261301057609854612fff908390600f0b613c44565b6130099084613c44565b9250600091505b8061301a81613d29565b915050612ef0565b5061302d8282613baa565b6001600160801b031695945050505050565b600054610100900460ff166130665760405162461bcd60e51b8152600401610b2490613b5f565b61127033612629565b600054610100900460ff166130965760405162461bcd60e51b8152600401610b2490613b5f565b600160d155565b600054610100900460ff166130c45760405162461bcd60e51b8152600401610b2490613b5f565b81516130d79060679060208501906133f7565b5080516130eb9060689060208401906133f7565b5060006065555050565b600081815b8381101561325157600087828151811061311657613116613d9a565b6020026020010151600001519050600088838151811061313857613138613d9a565b602002602001015160200151905081600f0b88600f0b12801561315a57508584145b15613163578293505b81600f0b88600f0b12801561317d575081600f0b87600f0b135b8061319f575087600f0b82600f0b1315801561319f575080600f0b87600f0b13155b806131bf575080600f0b88600f0b1280156131bf575080600f0b87600f0b135b1561323c5760006131d08989613c44565b90506131dc8984613355565b98506131e88383613c44565b6131f2828b613baa565b6131fc9190613baa565b97506040518060400160405280600019600f0b8152602001600019600f0b8152508a858151811061322f5761322f613d9a565b6020026020010181905250505b5050808061324990613d29565b9150506130fa565b50825b818111156132b05786613268600183613c94565b8151811061327857613278613d9a565b602002602001015187828151811061329257613292613d9a565b602002602001018190525080806132a890613cd7565b915050613254565b5060408051808201909152600f86810b825260985460208301916132d69188910b613355565b600f0b8152508682815181106132ee576132ee613d9a565b6020026020010181905250828061330490613d29565b609854909450600f90810b810b9086900b1315905061334b5760985461333c90879060009061333690600f0b88613c44565b866130f5565b508261334781613d29565b9350505b5090949350505050565b600081600f0b83600f0b1261336a578161336c565b825b9392505050565b82805461337f90613cee565b90600052602060002090601f0160209004810192826133a157600085556133e7565b82601f106133ba5782800160ff198235161785556133e7565b828001600101855582156133e7579182015b828111156133e75782358255916020019190600101906133cc565b506133f392915061346b565b5090565b82805461340390613cee565b90600052602060002090601f01602090048101928261342557600085556133e7565b82601f1061343e57805160ff19168380011785556133e7565b828001600101855582156133e7579182015b828111156133e7578251825591602001919060010190613450565b5b808211156133f3576000815560010161346c565b60006001600160401b038084111561349a5761349a613db0565b604051601f8501601f19908116603f011681019082821181831017156134c2576134c2613db0565b816040528093508581528686860111156134db57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611af157600080fd5b60008083601f84011261351e57600080fd5b5081356001600160401b0381111561353557600080fd5b6020830191508360208260051b850101111561102d57600080fd5b600082601f83011261356157600080fd5b61336c83833560208501613480565b60006020828403121561358257600080fd5b61336c826134f5565b6000806040838503121561359e57600080fd5b6135a7836134f5565b91506135b5602084016134f5565b90509250929050565b6000806000606084860312156135d357600080fd5b6135dc846134f5565b92506135ea602085016134f5565b9150604084013590509250925092565b6000806000806080858703121561361057600080fd5b613619856134f5565b9350613627602086016134f5565b92506040850135915060608501356001600160401b0381111561364957600080fd5b8501601f8101871361365a57600080fd5b61366987823560208401613480565b91505092959194509250565b6000806040838503121561368857600080fd5b613691836134f5565b9150602083013580151581146136a657600080fd5b809150509250929050565b600080604083850312156136c457600080fd5b6136cd836134f5565b946020939093013593505050565b600080604083850312156136ee57600080fd5b6136f7836134f5565b915060208301356001600160601b03811681146136a657600080fd5b6000806000806040858703121561372957600080fd5b84356001600160401b038082111561374057600080fd5b61374c8883890161350c565b9096509450602087013591508082111561376557600080fd5b506137728782880161350c565b95989497509550505050565b60006020828403121561379057600080fd5b813561336c81613dc6565b6000602082840312156137ad57600080fd5b815161336c81613dc6565b600080602083850312156137cb57600080fd5b82356001600160401b03808211156137e257600080fd5b818501915085601f8301126137f657600080fd5b81358181111561380557600080fd5b86602082850101111561381757600080fd5b60209290920196919550909350505050565b60008060008060008060008060008060006101608c8e03121561384b57600080fd5b6001600160401b03808d35111561386157600080fd5b61386e8e8e358f01613550565b9b508060208e0135111561388157600080fd5b506138928d60208e01358e01613550565b99506138a060408d016134f5565b98506138ae60608d016134f5565b9a9d999c50979a60808101359960a0820135995060c0820135985060e0820135975061010082013596506101208201359550610140909101359350915050565b60006020828403121561390057600080fd5b5035919050565b6000806040838503121561391a57600080fd5b823591506135b5602084016134f5565b6000806040838503121561393d57600080fd5b50508035926020909101359150565b6000806000806080858703121561396257600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613996816020860160208601613cab565b601f01601f19169290920160200192915050565b60008084546139b881613cee565b600182811680156139d057600181146139e157613a10565b60ff19841687528287019450613a10565b8860005260208060002060005b85811015613a075781548a8201529084019082016139ee565b50505082870194505b505050508351613a24818360208801613cab565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a609083018461397e565b9695505050505050565b6020810160048310613a8c57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061336c602083018461397e565b6000602080835260008454613ab981613cee565b80848701526040600180841660008114613ada5760018114613aee57613b1c565b60ff19851689840152606089019550613b1c565b896000528660002060005b85811015613b145781548b8201860152908301908801613af9565b8a0184019650505b509398975050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600f0b83600f0b600082128260016001607f1b0303821381151615613bd457613bd4613d58565b8260016001607f1b0319038212811615613bf057613bf0613d58565b50019392505050565b60008219821115613c0c57613c0c613d58565b500190565b600082613c2057613c20613d6e565b500490565b6000816000190483118215151615613c3f57613c3f613d58565b500290565b600081600f0b83600f0b600081128160016001607f1b031901831281151615613c6f57613c6f613d58565b8160016001607f1b03018313811615613c8a57613c8a613d58565b5090039392505050565b600082821015613ca657613ca6613d58565b500390565b60005b83811015613cc6578181015183820152602001613cae565b8381111561187c5750506000910152565b600081613ce657613ce6613d58565b506000190190565b600181811c90821680613d0257607f821691505b60208210811415613d2357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d3d57613d3d613d58565b5060010190565b600082613d5357613d53613d6e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611e3457600080fdfea2646970667358221220aaa2ffa1597d57158dd2455a9812ef55020edf481a4146831027e22d524467e664736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "events": {
      "Initialized(uint256,uint256,uint256,uint256)": {
        "details": "Emitted on initializePhases()",
        "params": {
          "allowlistPrice": "Price of the allowlist sale in Avax",
          "allowlistStartTime": "Allowlist mint start time in seconds",
          "publicSaleStartTime": "Public sale start time in seconds",
          "salePrice": "Price of the public sale in Avax"
        }
      },
      "Mint(address,uint256,uint256,uint256)": {
        "details": "Emitted on allowlistMint(), publicSaleMint()",
        "params": {
          "price": "Price in AVAX for the NFTs",
          "quantity": "Amount of NFTs minted",
          "sender": "The address that minted",
          "tokenId": "The token ID of the first minted NFT"
        }
      },
      "PublicSaleStateChanged(bool)": {
        "details": "Emitted on setPublicSaleActive()",
        "params": {
          "isActive": "True if the public sale is open, false otherwise"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowlistMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "currentPhase()": {
        "returns": {
          "_0": "phase Current phase"
        }
      },
      "devMint(uint256)": {
        "details": "Can only mint up to `amountForDevs`",
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getOwnershipData(uint256)": {
        "params": {
          "_tokenId": "Token ID"
        },
        "returns": {
          "_0": "TokenOwnership Ownership struct for a specific token ID"
        }
      },
      "hasBatchToReveal()": {
        "returns": {
          "_0": "bool Whether reveal can be triggered or not",
          "_1": "uint256 The number of the next batch that will be revealed"
        }
      },
      "initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_batchRevealSize": "Size of the batch reveal",
          "_collectionSize": "The collection size (e.g 10000)",
          "_maxBatchSize": "Max amount of NFTs that can be minted at once",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_revealInterval": "Interval between two batch reveals in seconds",
          "_revealStartTime": "Start of the token URIs reveal in seconds",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        }
      },
      "initializeJoeFee(uint256,address)": {
        "params": {
          "_joeFeeCollector": "The address to which the fees on the sale will be sent",
          "_joeFeePercent": "The fees collected by Joepegs on the sale benefits"
        }
      },
      "initializePhases(uint256,uint256,uint256,uint256)": {
        "details": "Can only be called once",
        "params": {
          "_allowlistPrice": "Price of the allowlist sale in Avax",
          "_allowlistStartTime": "Allowlist mint start time in seconds",
          "_publicSaleStartTime": "Public sale start time in seconds",
          "_salePrice": "Price of the public sale in Avax"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "numberMinted(address)": {
        "params": {
          "_owner": "The owner of the NFTs"
        },
        "returns": {
          "_0": "numberMinted Number of NFTs minted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "publicSaleMint(uint256)": {
        "params": {
          "_quantity": "Quantity of NFTs to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "seedAllowlist(address[],uint256[])": {
        "params": {
          "_addresses": "List of addresses allowed to mint during the allowlist phase",
          "_numNfts": "List of NFT quantities mintable per address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "This sets the URI for revealed tokens Only callable by project owner",
        "params": {
          "_baseURI": "Base URI to be set"
        }
      },
      "setProjectOwner(address)": {
        "details": "The project owner can call `devMint` any time",
        "params": {
          "_projectOwner": "The project owner"
        }
      },
      "setRoyaltyInfo(address,uint96)": {
        "params": {
          "_feePercent": "Royalty fee percent in basis point",
          "_receiver": "Royalty fee collector"
        }
      },
      "setUnrevealedURI(string)": {
        "details": "Only callable by project owner",
        "params": {
          "_unrevealedURI": "Unrevealed URI to be set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these IDs are created. This function call must use less than 30 000 gas.",
        "params": {
          "_interfaceId": "InterfaceId to consider. Comes from type(Interface).interfaceId"
        },
        "returns": {
          "_0": "isInterfaceSupported True if the considered interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_id": "Token id"
        },
        "returns": {
          "_0": "URI Token URI"
        }
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAVAX(address)": {
        "params": {
          "_to": "Recipient of the earned AVAX"
        }
      }
    },
    "stateVariables": {
      "allowlistPrice": {
        "details": "allowlistPrice is scaled to 1e18"
      },
      "salePrice": {
        "details": "salePrice is scaled to 1e18"
      }
    },
    "title": "FlatLaunchpeg",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASIS_POINT_PRECISION()": {
        "notice": "Percentage base point"
      },
      "allowlist(address)": {
        "notice": "The amount of NFTs each allowed address can mint during the allowlist mint"
      },
      "allowlistMint(uint256)": {
        "notice": "Mint NFTs during the allowlist mint"
      },
      "allowlistPrice()": {
        "notice": "Price of one NFT for people on the mint list"
      },
      "allowlistStartTime()": {
        "notice": "Start time of the allowlist mint in seconds"
      },
      "amountForAllowlist()": {
        "notice": "Amount of NFTs available for the allowlist mint (e.g 1000)"
      },
      "amountForDevs()": {
        "notice": "Amount of NFTs reserved for `projectOwner` (e.g 200)"
      },
      "amountMintedByDevs()": {
        "notice": "Tracks the amount of NFTs minted by `projectOwner`"
      },
      "amountMintedDuringAllowlist()": {
        "notice": "Tracks the amount of NFTs minted on Allowlist phase"
      },
      "amountMintedDuringPublicSale()": {
        "notice": "Tracks the amount of NFTs minted on Public Sale phase"
      },
      "baseURI()": {
        "notice": "Token URI after collection reveal"
      },
      "batchToSeed(uint256)": {
        "notice": "Randomized seeds used to shuffle TokenURIs"
      },
      "collectionSize()": {
        "notice": "The collection size (e.g 10000)"
      },
      "currentPhase()": {
        "notice": "Returns the current phase"
      },
      "devMint(uint256)": {
        "notice": "Mint NFTs to the project owner"
      },
      "forceReveal()": {
        "notice": "Allows ProjectOwner to reveal batches even if the conditions are not met"
      },
      "getOwnershipData(uint256)": {
        "notice": "Returns the ownership data of a specific token ID"
      },
      "hasBatchToReveal()": {
        "notice": "Tells you if a batch can be revealed"
      },
      "initialize(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "FlatLaunchpeg initialization Can only be called once"
      },
      "initializeJoeFee(uint256,address)": {
        "notice": "Initialize the sales fee percent taken by Joepegs and address that collects the fees"
      },
      "initializePhases(uint256,uint256,uint256,uint256)": {
        "notice": "Initialize the two phases of the sale"
      },
      "joeFeeCollector()": {
        "notice": "The address to which the fees on the sale will be sent"
      },
      "joeFeePercent()": {
        "notice": "The fees collected by Joepegs on the sale benefits"
      },
      "lastTokenRevealed()": {
        "notice": "Last token that has been revealed"
      },
      "maxBatchSize()": {
        "notice": "Max amount of NFTs that can be minted at once"
      },
      "maxPerAddressDuringMint()": {
        "notice": "Max amount of NFTs an address can mint"
      },
      "numberMinted(address)": {
        "notice": "Returns the number of NFTs minted by a specific address"
      },
      "projectOwner()": {
        "notice": "The project owner"
      },
      "publicSaleMint(uint256)": {
        "notice": "Mint NFTs during the public sale"
      },
      "publicSaleStartTime()": {
        "notice": "Start time of the public sale in seconds"
      },
      "revealBatchSize()": {
        "notice": "Size of the batch reveal"
      },
      "revealInterval()": {
        "notice": "Time interval for gradual reveal"
      },
      "revealNextBatch()": {
        "notice": "Reveals the next batch if the reveal conditions are met"
      },
      "revealStartTime()": {
        "notice": "Timestamp for the start of the reveal process"
      },
      "salePrice()": {
        "notice": "Price of one NFT during the public sale"
      },
      "seedAllowlist(address[],uint256[])": {
        "notice": "Set amount of NFTs mintable per address during the allowlist phase"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI"
      },
      "setProjectOwner(address)": {
        "notice": "Set the project owner"
      },
      "setRoyaltyInfo(address,uint96)": {
        "notice": "Set the royalty fee"
      },
      "setUnrevealedURI(string)": {
        "notice": "Set the unrevealed URI"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "unrevealedURI()": {
        "notice": "Token URI before the collection reveal"
      },
      "withdrawAVAX(address)": {
        "notice": "Withdraw AVAX to the contract owner"
      }
    },
    "notice": "Implements a simple minting NFT contract with an allowlist and public sale phase.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 149,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 152,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 938,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1185,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6090,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 6092,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 6094,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 6096,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_symbol",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 6101,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_ownerships",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)6079_storage)"
      },
      {
        "astId": 6106,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_addressData",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressData)6088_storage)"
      },
      {
        "astId": 6110,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6116,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7364,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)42_storage"
      },
      {
        "astId": 2138,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "collectionSize",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2140,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "intCollectionSize",
        "offset": 0,
        "slot": "152",
        "type": "t_int128"
      },
      {
        "astId": 2144,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "revealBatchSize",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 2150,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "batchToSeed",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2155,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "lastTokenRevealed",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 2158,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_rangeLength",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 2162,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "revealStartTime",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 2166,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "revealInterval",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_owner",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "160",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 230,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_status",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 274,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 468,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "259",
        "type": "t_struct(RoyaltyInfo)465_storage"
      },
      {
        "astId": 473,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)465_storage)"
      },
      {
        "astId": 653,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "__gap",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1307,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "collectionSize",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 1311,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountForDevs",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 1315,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountForAllowlist",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 1319,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "maxBatchSize",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 1323,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "maxPerAddressDuringMint",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 1327,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "joeFeePercent",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 1331,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "joeFeeCollector",
        "offset": 0,
        "slot": "315",
        "type": "t_address"
      },
      {
        "astId": 1339,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "projectOwner",
        "offset": 0,
        "slot": "316",
        "type": "t_address"
      },
      {
        "astId": 1342,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "baseURI",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      },
      {
        "astId": 1345,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "unrevealedURI",
        "offset": 0,
        "slot": "318",
        "type": "t_string_storage"
      },
      {
        "astId": 1351,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "allowlist",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1355,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedByDevs",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 1359,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedDuringAllowlist",
        "offset": 0,
        "slot": "321",
        "type": "t_uint256"
      },
      {
        "astId": 1363,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "amountMintedDuringPublicSale",
        "offset": 0,
        "slot": "322",
        "type": "t_uint256"
      },
      {
        "astId": 1367,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "allowlistStartTime",
        "offset": 0,
        "slot": "323",
        "type": "t_uint256"
      },
      {
        "astId": 1371,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "publicSaleStartTime",
        "offset": 0,
        "slot": "324",
        "type": "t_uint256"
      },
      {
        "astId": 2876,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "allowlistPrice",
        "offset": 0,
        "slot": "325",
        "type": "t_uint256"
      },
      {
        "astId": 2880,
        "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
        "label": "salePrice",
        "offset": 0,
        "slot": "326",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)42_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)6088_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721AUpgradeable.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)6088_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)465_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)465_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)6079_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721AUpgradeable.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)6079_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)6088_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AUpgradeable.AddressData",
        "members": [
          {
            "astId": 6081,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6083,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6085,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6087,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)465_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 462,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 464,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)6079_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AUpgradeable.TokenOwnership",
        "members": [
          {
            "astId": 6074,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6076,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6078,
            "contract": "contracts/FlatLaunchpeg.sol:FlatLaunchpeg",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}